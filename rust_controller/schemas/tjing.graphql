schema {
  query: RootQuery
  mutation: RootMutation
}
type RootQuery {
  isAuthenticated: Boolean!
  """
  Information about the current logged in user
  """
  me: Me
  player(playerId: ID!): Player
  tour(tourId: ID!): Tour
  """
  Published Tours
  """
  tours(filter: ToursFilterInput): [Tour!]!
  event(eventId: ID!): Event
  """
  Checks if team or user has valid licence for the event, one of arguments must be specified alongside the eventId.
  """
  hasLicenceForEvent(eventId: ID!, teamId: ID): Boolean
  eventSearch(
    """
    For Pagination; From which index should the results start
    """
    skip: Int
    """
    matches multiple name fields, i.e event, city, course
    """
    query: String
    """
    Search from and to dates
    """
    dates: EventSearchDateInputType
    """
    Search either by ascending distance or ascending date.
    """
    sortBy: EventSearchSortInputType
    """
    Event course must be within given arguments
    """
    distance: EventSearchDistanceInputType
    """
    matches event pdga type name
    """
    pdgaTypes: [PdgaEventTypeEnum]
    """
    Im not sure what this is
    """
    tourTypes: [String]
    """
    Include this to specify if only to include doubles or singles events. Left undefined will include both.
    """
    singles: Boolean
  ): EventSearchResultType!
  shopItem(itemId: ID!): ShopItem
  eventItemShopImages(tourId: ID!): [EventShopItemImage]!
  round(roundId: ID!): Round
  pool(poolId: ID!): Pool
  group(groupId: ID!): Group
  layout(layoutId: ID!): Layout
  layoutVersion(layoutVersionId: ID!): LayoutVersion
  """
  List of associations
  """
  associations: [Organization!]!
  """
  Players in an event, based on their division and sorting criterias
  """
  eventPlayers(
    """
    Specify the event to get players from
    """
    eventId: ID!
    """
    Specify the event to get players from
    """
    divisionId: ID
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float!
    """
    Skip x. Default is 0.
    """
    skip: Float!
    search: String
    orderBy: EventPlayersOrderByInput
    direction: SortOrderType
  ): [Player!]!
  """
  Registrations in an event, based on their division and sorting criterias. 
          Using USER_CANCELLED status will return all variations of cancelled registrations
  """
  eventRegistrations(
    """
    Specify the event to get players from
    """
    eventId: ID!
    """
    Specify the division to filter by, if un specified all divisions will be returned.
    """
    divisionId: ID
    """
    Specify what status to collect users from
    """
    status: RegistrationStatus!
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float!
    """
    Skip x. Default is 0.
    """
    skip: Float!
    search: String
    orderBy: EventRegistrationsOrderByInput
    direction: SortOrderType
  ): [Registration!]!
  """
  Team registrations based on their division and sorting criterias
  """
  eventTeamRegistrations(
    """
    Specify the event to get players from
    """
    eventId: ID!
    """
    Specify the division to filter by, if un specified all divisions will be returned.
    """
    divisionId: ID
    """
    Specify what status to collect users from
    """
    status: RegistrationStatus!
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float!
    """
    Skip x. Default is 0.
    """
    skip: Float!
    orderBy: EventTeamsOrderByInput
    direction: SortOrderType
  ): [TeamRegistration!]!
  """
  Team registrations based on their division and sorting criterias
  """
  eventTeamPlayers(
    """
    Specify the event to get players from
    """
    eventId: ID!
    """
    Specify the division to filter by
    """
    divisionId: ID
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float!
    """
    Skip x. Default is 0.
    """
    skip: Float!
    orderBy: EventTeamsOrderByInput
    direction: SortOrderType
  ): [TeamPlayer!]!
  """
  Search for clubs. When geolocation is passed the result will be ordered by distance otherwise by name
  """
  clubs(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    filter: NameAndDistanceInput
  ): [Organization!]!
  """
  Search for public courses. When geolocation is passed the result will be ordered by distance otherwise by name
  """
  courses(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    filter: NameAndDistanceInput
  ): [SearchCourse!]!
  """
  Load replies to a comment made on an event message
  """
  eventMessageCommentReplies(
    replyId: ID
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
  ): [EventMessageReply!]!
  """
  Load replies to a comment made on an event message
  """
  eventMessageComments(
    eventMessageId: ID
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
  ): [EventMessageReply!]!
  team(teamId: ID!): Team
  teamPlayer(teamPlayerId: ID!): TeamPlayerType
  teamPlayers(teamId: ID!): [TeamPlayer!]!
  course(courseId: ID!): Course
  divisionTypes: [DivisionTypeItem!]!
  countries: [Country!]!
  tourTypes: [TourType!]!
  eventMessageAudienceTypes: [EventMessageAudience!]!
  eventMessageTypes: [EventMessageTypeType!]!
  pdgaEventTypes: [PdgaEventType!]!
  userStats(userId: ID!, startDate: DateTime, endDate: DateTime): Stats
  userCasualStats(userId: ID!, startDate: DateTime, endDate: DateTime): Stats
  user(userId: ID!): PublicUser!
  users(
    """
    Searches in firstName, lastName, email
    """
    search: String
    first: Float
    skip: Float
  ): [User!]
  citySearch(query: String!, geolocation: GeolocationInput): [City!]
  scorecard(scorecardId: ID!): Scorecard
  currencies(isEnabledForPayments: Boolean): [Currency!]!
  meta: Meta!
  """
  Returns a custom point map if one has been created. If it is used or not is controlled by the ScoringType
  """
  customPointSystem(systemId: ID!): EventCustomPointsMap
  stripeAccount(stripeAccountId: ID!): StripeConnectedAccount
  organization(slug: String, organizationId: ID): Organization
  organizationContent(contentId: ID!): OrganizationContent
  eventRegistrationInvitation(invitationId: ID!): EventRegistrationInvitation
  """
  Utility to find any event users that are not DNF/DNS and don't have a group for this round yet.
  """
  playersWithoutGroups(
    roundId: ID!
    eventId: ID!
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
  ): [Player]!
  """
  Utility to find any teams that are not DNF/DNS and don't have a group for this round yet.
  """
  teamsWithoutGroups(
    roundId: ID!
    eventId: ID!
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
  ): [TeamPlayer]!
  subscriptions(returnUrl: String!): ManageSubscription
  packages(currency: String!): PackagePrices
}

"""
Information about the current logged in user
"""
type Me {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  isVerified: Boolean!
  profile: UserProfile!
  role: UserRole!
  """
  Events marked as favourite by user
  """
  favouriteEvents(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
  ): [FavouriteEvent!]!
  myRegistrations(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
    filter: RegistrationFilterMetaInput
  ): [UserRegistrationsCombined!]!
  registrations(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
    filter: RegistrationFilterMetaInput
  ): [Registration!]!
  teamRegistrations(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
    filter: RegistrationFilterMetaInput
  ): [TeamRegistration!]!
  """
  Courses created by current-user
  """
  courses: [Course!]!
  """
  Administrator roles for the current-user
  """
  administratorRoles(
    """
    Return the first x. Default is 20. Max is 50
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    Exclude tours that have been archived
    """
    onlyCurrent: Boolean
  ): [Administrator!]!
  """
  Administrator roles for the current-user
  """
  courseAdministratorRoles: [CourseAdministrator!]!
  """
  Organization administrator roles for the current-user
  """
  clubAdministratorRoles: [OrganizationAdministrator!]!
  """
  Pools which current user is participating in. Sorted by date descending.
  """
  pools(
    """
    Return the first x pools. Default is 50. Max is 100
    """
    first: Float
    """
    DEPRECATED - use filter instead. Filter by status
    """
    status: PoolStatus
    filter: PoolFilterMetaInput
  ): [Pool]!
  """
  Pools which current user's team is participating in. Sorted by date descending.
  """
  teamPools(
    """
    Return the first x pools. Default is 50. Max is 100
    """
    first: Float
    """
    DEPRECATED - use filter instead. Filter by status
    """
    status: PoolStatus
    filter: PoolFilterMetaInput
  ): [Pool]!
  """
  Groups which current user is participating in. Sorted by pool.date descending.
  """
  groups(
    """
    Return the first x groups. Default is 10. Max is 25
    """
    first: Float
    filter: GroupsFilterInput
  ): [Group]!
  """
  Groups which current user's team is participating in. Sorted by pool.date descending.
  """
  teamGroups(
    """
    Return the first x groups. Default is 10. Max is 25
    """
    first: Float
    filter: GroupsFilterInput
  ): [Group]!
  """
  Groups which current user is marshall in. Sorted by pool.date descending.
  """
  marshalls(
    """
    Return the first x groups. Default is 10. Max is 25
    """
    first: Float
    """
    Filter by status
    """
    status: GroupStatus
  ): [Group]!
  """
  Active scorecards for user, doubles and singles
  """
  activeEventScorecards: [Group]!
  connectedAccounts: [StripeConnectedAccount]!
  tourPasses: [TourPass]!
  teams: [Team]!
  scorecards(
    """
    Return the first x. Default is 50. Max is 100
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    filter: ScorecardFilterMetaInput
  ): [Scorecard]!
  orderHistory(
    """
    Return the first x orders. Default is 10
    """
    first: Int = 10
    """
    Skip x. Default is 0.
    """
    skip: Int = 0
    eventIds: [ID]
  ): [Order]!
  subscription: SubscriptionWithPackage
  clubs: [Organization]!
  mainClub: Organization
}

"""
Detailed information about a user
"""
type UserProfile {
  id: ID!
  gender: String
  club: String
  mainClubName: String
  mainClubSlug: String
  mainClubChangedAt: DateTime
  pdgaNumber: Float
  pdgaRating: Float
  country: Country
  """
  Is only returned for the authenticated user
  """
  phone: String
  instagram: String
  facebook: String
  twitter: String
  youtube: String
  tiktok: String
  sponsor: String
  biography: String
  """
  Is only returned for the authenticated user
  """
  pinCode: String
  """
  Used to determine if the profile details should be visible to other users
  """
  isPublic: Boolean
  """
  Is only returned for the authenticated user
  """
  isPinCodeLocked: Boolean
  profileImageUrl: String
  birthDate: DateTime
  socialSecurityId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
List of countries with their name and 2-letter country code
"""
type Country {
  name: String!
  code: CountryCode!
}

"""
ISO-3166 2-letter country code. https://en.wikipedia.org/wiki/ISO_3166-1
"""
enum CountryCode {
  """
  Afghanistan
  """
  AF
  """
  Albania
  """
  AL
  """
  Åland Islands
  """
  AX
  """
  Algeria
  """
  DZ
  """
  American Samoa
  """
  AS
  """
  Andorra
  """
  AD
  """
  Angola
  """
  AO
  """
  Anguilla
  """
  AI
  """
  Antigua
  """
  AG
  """
  Argentina
  """
  AR
  """
  Armenia
  """
  AM
  """
  Aruba
  """
  AW
  """
  Australia
  """
  AU
  """
  Austria
  """
  AT
  """
  Azerbaijan
  """
  AZ
  """
  Bahrain
  """
  BH
  """
  Bangladesh
  """
  BD
  """
  Barbados
  """
  BB
  """
  Belarus
  """
  BY
  """
  Belgium
  """
  BE
  """
  Belize
  """
  BZ
  """
  Benin
  """
  BJ
  """
  Bermuda
  """
  BM
  """
  Bhutan
  """
  BT
  """
  Bolivia
  """
  BO
  """
  Bosnia and Herzegovina
  """
  BA
  """
  Botswana
  """
  BW
  """
  Brazil
  """
  BR
  """
  British Indian Ocean Territory
  """
  IO
  """
  British Virgin Islands
  """
  VG
  """
  Brunei
  """
  BN
  """
  Bulgaria
  """
  BG
  """
  Burkina Faso
  """
  BF
  """
  Burma Myanmar
  """
  MM
  """
  Burundi
  """
  BI
  """
  Cambodia
  """
  KH
  """
  Cameroon
  """
  CM
  """
  Canada
  """
  CA
  """
  Cape Verde
  """
  CV
  """
  Cayman Islands
  """
  KY
  """
  Central African Republic
  """
  CF
  """
  Indonesia
  """
  ID
  """
  Chile
  """
  CL
  """
  China
  """
  CN
  """
  Colombia
  """
  CO
  """
  Comoros
  """
  KM
  """
  Cook Islands
  """
  CK
  """
  Costa Rica
  """
  CR
  """
  Côte d'Ivoire
  """
  CI
  """
  Croatia
  """
  HR
  """
  Cuba
  """
  CU
  """
  Cyprus
  """
  CY
  """
  Czech Republic
  """
  CZ
  """
  Democratic Republic of Congo
  """
  CD
  """
  Denmark
  """
  DK
  """
  Djibouti
  """
  DJ
  """
  Dominica
  """
  DM
  """
  Dominican Republic
  """
  DO
  """
  Ecuador
  """
  EC
  """
  Egypt
  """
  EG
  """
  El Salvador
  """
  SV
  """
  Equatorial Guinea
  """
  GQ
  """
  Eritrea
  """
  ER
  """
  Estonia
  """
  EE
  """
  Ethiopia
  """
  ET
  """
  Falkland Islands
  """
  FK
  """
  Faroe Islands
  """
  FO
  """
  Federated States of Micronesia
  """
  FM
  """
  Fiji
  """
  FJ
  """
  Finland
  """
  FI
  """
  France
  """
  FR
  """
  French Guiana
  """
  GF
  """
  French Polynesia
  """
  PF
  """
  Gabon
  """
  GA
  """
  Georgia
  """
  GE
  """
  Germany
  """
  DE
  """
  Ghana
  """
  GH
  """
  Gibraltar
  """
  GI
  """
  Greece
  """
  GR
  """
  Greenland
  """
  GL
  """
  Grenada
  """
  GD
  """
  Guadeloupe
  """
  GP
  """
  Guam
  """
  GU
  """
  Guatemala
  """
  GT
  """
  Guinea
  """
  GN
  """
  Guinea-Bissau
  """
  GW
  """
  Guyana
  """
  GY
  """
  Haiti
  """
  HT
  """
  Honduras
  """
  HN
  """
  Hong Kong
  """
  HK
  """
  Hungary
  """
  HU
  """
  Iceland
  """
  IS
  """
  India
  """
  IN
  """
  Iran
  """
  IR
  """
  Iraq
  """
  IQ
  """
  Ireland
  """
  IE
  """
  Israel
  """
  IL
  """
  Italy
  """
  IT
  """
  Jamaica
  """
  JM
  """
  Japan
  """
  JP
  """
  Jordan
  """
  JO
  """
  Kazakhstan
  """
  KZ
  """
  Kenya
  """
  KE
  """
  Kiribati
  """
  KI
  """
  Kosovo
  """
  XK
  """
  Kuwait
  """
  KW
  """
  Kyrgyzstan
  """
  KG
  """
  Laos
  """
  LA
  """
  Latvia
  """
  LV
  """
  Lebanon
  """
  LB
  """
  Lesotho
  """
  LS
  """
  Liberia
  """
  LR
  """
  Libya
  """
  LY
  """
  Liechtenstein
  """
  LI
  """
  Lithuania
  """
  LT
  """
  Luxembourg
  """
  LU
  """
  Macau
  """
  MO
  """
  Macedonia
  """
  MK
  """
  Madagascar
  """
  MG
  """
  Malawi
  """
  MW
  """
  Malaysia
  """
  MY
  """
  Maldives
  """
  MV
  """
  Mali
  """
  ML
  """
  Malta
  """
  MT
  """
  Marshall Islands
  """
  MH
  """
  Martinique
  """
  MQ
  """
  Mauritania
  """
  MR
  """
  Mauritius
  """
  MU
  """
  Mayotte
  """
  YT
  """
  Mexico
  """
  MX
  """
  Moldova
  """
  MD
  """
  Monaco
  """
  MC
  """
  Mongolia
  """
  MN
  """
  Montenegro
  """
  ME
  """
  Montserrat
  """
  MS
  """
  Morocco
  """
  MA
  """
  Mozambique
  """
  MZ
  """
  Namibia
  """
  NA
  """
  Nauru
  """
  NR
  """
  Nepal
  """
  NP
  """
  Netherlands
  """
  NL
  """
  Netherlands Antilles
  """
  AN
  """
  New Caledonia
  """
  NC
  """
  New Zealand
  """
  NZ
  """
  Nicaragua
  """
  NI
  """
  Niger
  """
  NE
  """
  Nigeria
  """
  NG
  """
  Niue
  """
  NU
  """
  Norfolk Island
  """
  NF
  """
  North Korea
  """
  KP
  """
  Northern Mariana Islands
  """
  MP
  """
  Norway
  """
  NO
  """
  Oman
  """
  OM
  """
  Pakistan
  """
  PK
  """
  Palau
  """
  PW
  """
  Palestine
  """
  PS
  """
  Panama
  """
  PA
  """
  Papua New Guinea
  """
  PG
  """
  Paraguay
  """
  PY
  """
  Peru
  """
  PE
  """
  Philippines
  """
  PH
  """
  Poland
  """
  PL
  """
  Portugal
  """
  PT
  """
  Puerto Rico
  """
  PR
  """
  Qatar
  """
  QA
  """
  Republic of the Congo
  """
  CG
  """
  Réunion
  """
  RE
  """
  Romania
  """
  RO
  """
  Russia
  """
  RU
  """
  Rwanda
  """
  RW
  """
  Saint Barthélemy
  """
  BL
  """
  Saint Helena
  """
  SH
  """
  Saint Kitts and Nevis
  """
  KN
  """
  Saint Martin
  """
  MF
  """
  Saint Pierre and Miquelon
  """
  PM
  """
  Saint Vincent and the Grenadines
  """
  VC
  """
  Samoa
  """
  WS
  """
  San Marino
  """
  SM
  """
  São Tomé and Príncipe
  """
  ST
  """
  Saudi Arabia
  """
  SA
  """
  Senegal
  """
  SN
  """
  Serbia
  """
  RS
  """
  Seychelles
  """
  SC
  """
  Sierra Leone
  """
  SL
  """
  Singapore
  """
  SG
  """
  Slovakia
  """
  SK
  """
  Slovenia
  """
  SI
  """
  Solomon Islands
  """
  SB
  """
  Somalia
  """
  SO
  """
  South Africa
  """
  ZA
  """
  South Korea
  """
  KR
  """
  Spain
  """
  ES
  """
  Sri Lanka
  """
  LK
  """
  St. Lucia
  """
  LC
  """
  Sudan
  """
  SD
  """
  Suriname
  """
  SR
  """
  Swaziland
  """
  SZ
  """
  Sweden
  """
  SE
  """
  Switzerland
  """
  CH
  """
  Syria
  """
  SY
  """
  Taiwan
  """
  TW
  """
  Tajikistan
  """
  TJ
  """
  Tanzania
  """
  TZ
  """
  Thailand
  """
  TH
  """
  The Bahamas
  """
  BS
  """
  The Gambia
  """
  GM
  """
  Timor-Leste
  """
  TL
  """
  Togo
  """
  TG
  """
  Tokelau
  """
  TK
  """
  Tonga
  """
  TO
  """
  Trinidad and Tobago
  """
  TT
  """
  Tunisia
  """
  TN
  """
  Turkey
  """
  TR
  """
  Turkmenistan
  """
  TM
  """
  Turks and Caicos Islands
  """
  TC
  """
  Tuvalu
  """
  TV
  """
  Uganda
  """
  UG
  """
  Ukraine
  """
  UA
  """
  United Arab Emirates
  """
  AE
  """
  United Kingdom
  """
  GB
  """
  United States
  """
  US
  """
  Uruguay
  """
  UY
  """
  US Virgin Islands
  """
  VI
  """
  Uzbekistan
  """
  UZ
  """
  Vanuatu
  """
  VU
  """
  Vatican City
  """
  VA
  """
  Venezuela
  """
  VE
  """
  Vietnam
  """
  VN
  """
  Wallis and Futuna
  """
  WF
  """
  Yemen
  """
  YE
  """
  Zambia
  """
  ZM
  """
  Zimbabwe
  """
  ZW
}

enum UserRole {
  ADMIN
  USER
}

"""
Events marked as favourite by the user
"""
type FavouriteEvent {
  id: ID!
  event: Event!
  createdAt: DateTime!
}

"""
Information about Event
"""
type Event {
  id: ID!
  name: String!
  description: String
  isPublished: Boolean
  maxSpots: Float
  maxRegistrations: Float
  maxWildcards: Float
  isRegistrationOpen: Boolean!
  registrationOpenAt: DateTime
  registrationCloseAt: DateTime
  tournamentDirectorName: String
  assistantTournamentDirectorName: String
  assistantTournamentDirectorPhone: String
  assistantTournamentDirectorEmail: String
  phone: String
  email: String
  registrationFeesInfo: String
  registrationFeeOverrides: [EventDivisionOverride]!
  paymentInfo: String
  location: String
  city: City
  website: String
  isResultSigningEnabled: Boolean!
  multipleScorecardModeEnabled: Boolean!
  """
  With this enabled all results need to be verified by another user
  """
  isVerifyMode: Boolean!
  groupSize: Float
  checkInStartsAt: DateTime
  checkInEndsAt: DateTime
  autoOpenRegistration: Boolean
  autoCloseInactivePools: Boolean
  singles: Boolean
  teamSize: Float
  defaultToTeamName: Boolean
  pdgaEventId: String
  pdgaType: PdgaEventType
  waitinglistType: WaitinglistType
  agreementName: String
  agreementUrl: String
  """
  Date when the first pool in event starts
  """
  startDate: DateTime
  """
  Date when the last pool in event starts
  """
  endDate: DateTime
  """
  Is false if there are any registration or player for event
  """
  isDeletable: Boolean!
  stripeAccountId: ID
  """
  Only available for the TD
  """
  registrationInvitations: [EventRegistrationInvitation!]!
  """
  Only available for the TD
  """
  contactList: [EventContactList!]!
  """
  Only available for TDs
  """
  connectedAccount: StripeConnectedAccount
  """
  CLOSED=All pools are closed, COMPLETED=all pools are completed, ONGOING=If any pool are prepare or open
  """
  status: EventStatus!
  """
  Total number of registrations with status 'PENDING'
  """
  waitingListLength: Float!
  """
  Total number of registrations across all divisions in this Event
  """
  registrationsCount: Float!
  registrations: [SingleAndDoubleRegistration!]!
  groupRegistrationReservations: [GroupRegistrationReservation!]!
  """
  Total number of players across all divisions in this Event
  """
  playersCount: Float!
  """
  Total number of player who have been granted wildcards
  """
  wildcardsCount: Float!
  """
  Count of players in an event, based on their division
  """
  registrationsCountPerDivision: EventRegistrationCount!
  """
  Returns true if the logged in user has this event marked as a favourite.
  """
  isUserFavourite: Boolean!
  dnfDnsCount: [Player!]!
  players: [Player!]!
  teams: [TeamPlayer!]!
  tour: Tour!
  """
  Rounds are ordered by ascending pool date
  """
  rounds: [Round]!
  """
  Counting existing eventmessages and unread if user is logged in.
  """
  eventMessageMeta: EventMessageCount
  """
  Counting existing eventmessages and unread if user is logged in.
  """
  userIsAdmin: Boolean
  """
  Event messages are ordered by ascending date
  """
  eventMessages: [EventMessage]!
  tiebreaks: [Tiebreak]!
  registrationStages: [RegistrationStage]!
  ties: [Tie!]!
  """
  Caching result for 90 seconds
  """
  stats(divisionId: ID): Stats
  """
  Caching result for 0 seconds
  """
  leaderboard(divisionId: ID, page: Int): EventLeaderboardDivisionCombined
  """
  Caching result for 90 seconds
  """
  statsLeaderboards(
    divisionId: ID
    page: Float
    direction: SortOrderType
    orderBy: TourStatsOrderByInput
  ): EventStatsLeaderboard!
  """
  If provided a userid returns a summary of the users stats for the entire event. 
          Only applicable to singles events.
        
  """
  userStats(userId: ID!): Stats
  shopItems: [ShopItem]!
  orders(
    """
    Return the first x orders. Default is 10
    """
    first: Int = 10
    """
    Skip x. Default is 0.
    """
    skip: Int = 0
    """
    Specify order type to get, default is ALL.
    """
    orderContentType: OrderContentType = ALL
  ): GeneralOrderType
  userEventMeta: UserEventMetaTypeCombined
  ordersCount: Int!
  productsCount: Int!
  """
  Check if the current event/tour has an active subscription
  """
  subscriptionTier: PackageTierEnum
  divisionInPool: [DivisionInPoolType]!
  divisions: [Division]!
  """
  Require licence from association to register
  """
  requireLicenceFrom: Organization
  """
  Define if licence is required from foreign players, only applicable if requireLicenceFrom is set
  """
  requireLicenceFromForeignPlayers: Boolean
  documents: [EvenDocument]!
  registrationQuestions: [RegistrationQuestion]!
  """
  Returns a custom point map if one has been created. If it is used or not is controlled by the ScoringType
  """
  customPointSystem: EventCustomPointsMap
  """
  Returns a list of country restrictions if any has been created. 
  """
  countryRestrictions: [EventCountryRestriction]!
}

"""
An event level override for the registration fees specified on the tour divisions
"""
type EventDivisionOverride {
  id: ID!
  eventId: ID!
  event: Event!
  divisionId: ID!
  division: Division!
  registrationFee: Float
  maxSpots: Float
  reservedSpots: Float
  maxRegistrations: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Information about Division
"""
type Division {
  id: ID!
  type: String!
  divisionTypeId: ID!
  isCustomDivision: Boolean!
  position: Float!
  name: String!
  maxSpots: Float
  reservedSpots: Float
  maxRegistrations: Float
  canBeGenderLocked: Boolean
  isGenderLockedTo: GenderType
  canBeAgeRestricted: Boolean
  isAgeRestricted: Boolean
  ageRequirement: Float
  mustBeOrBelowAge: Boolean
  registrationFee: Money
  tourPassFee: Money
  taxRate: TaxRate
  """
  Is false if there are any registration or player for division
  """
  isDeletable: Boolean!
  tour: Tour!
}

enum GenderType {
  MALE
  FEMALE
}

type Money {
  value: Float!
  formatted: String!
  """
  3-letter ISO-4217 code. https://en.wikipedia.org/wiki/ISO_4217
  """
  currency: String!
}

type TaxRate {
  id: String!
  display_name: String!
  active: Boolean!
  description: String
  inclusive: Boolean!
  percentage: Float!
}

"""
Information about Tour
"""
type Tour {
  id: ID!
  name: String!
  type: TourType
  scoringType: ScoringType!
  registrationMethod: RegistrationMethod!
  scoreBasedOnNrOfEvents: Float
  isPublished: Boolean!
  """
  Tour privacy
  """
  isPrivate: Boolean!
  paymentType: TourPaymentType!
  tourPasses: [TourPassCombined!]!
  usersTourPass(teamId: ID): TourPassCombined
  """
  Only applicable if paymentType=MANAGED
  """
  automaticRefunds: Boolean!
  allowRegistrationMessage: Boolean!
  """
  Checks if logged in user is admin
  """
  userIsAdmin: Boolean
  isArchived: Boolean!
  """
  Is false if tour has registrations or players
  """
  isDeletable: Boolean!
  """
  Only available for TDs
  """
  connectedAccount: StripeConnectedAccount
  status: TourStatus!
  eventsCount: Float!
  """
  Events are ordered by the date of the earliest round
  """
  events: [Event]!
  administrators: [Administrator]!
  """
  Upcoming event
  """
  nextEvent: Event
  divisions: [Division]!
  """
  Caching result for 90 seconds
  """
  statsLeaderboards(
    divisionId: ID
    page: Float
    direction: SortOrderType
    orderBy: TourStatsOrderByInput
  ): StatsLeaderboard!
  """
  Caching result for 0 seconds. Must specify a divisionId.
  """
  leaderboard(
    divisionId: ID
    page: Int
    numberOfEvents: Int
    includeEventsWithoutResults: Boolean = false
    includeUncompletedEvents: Boolean = false
    scoringType: EventsScoringType
  ): TourLeaderboardDivision
  """
  Returns a custom point map if one has been created. If it is used or not is controlled by the ScoringType
  """
  customPointSystem: EventCustomPointsMap
  """
  Tour is fee included or not
  """
  feeIncluded: Boolean!
  """
  Tour currency
  """
  currency: String!
  """
  Tour currency
  """
  organizations: [Organization]!
  """
  Allow adjusting the currency, until a transaction has been made.
  """
  allowChangeCurrency: Boolean!
  """
  Check if the current event/tour has an active subscription
  """
  subscriptionTier: PackageTierEnum
  """
  Check if the current event/tour has an active subscription
  """
  hasActiveSubscription: Boolean
  """
  Check if there is an active transfor of ownership in progress
  """
  ownershipTransfer: [TransferTourOwnershipType]!
  documents: [EvenDocument]!
}

type TourType {
  name: String!
  type: String!
}

enum ScoringType {
  THROWS
  AVERAGE_THROWS
  POINTS
  DYNAMIC_POINTS
  CUSTOM_POINTS
  PAR
}

enum RegistrationMethod {
  LIST
  GROUPS
}

enum TourPaymentType {
  MANUAL
  MANAGED
}

union TourPassCombined = TourPass | TeamTourPass

type TourPass {
  id: ID!
  user: User!
  tour: Tour!
  division: Division!
  payment: Payment!
  order: Order
  createdAt: DateTime
}

"""
Information about a user
"""
type User {
  id: ID!
  firstName: String
  lastName: String
  isAnonymous: Boolean!
  """
  Only visible for Admins
  """
  email: String
  """
  Only visible for Admins
  """
  isDisabled: Boolean
  profile: UserProfile!
  teams: [Team]!
}

"""
Information about Team
"""
type Team {
  id: ID!
  name: String!
  type: TeamType
  archived: Boolean!
  teamPlayers: [TeamPlayerType!]!
  createdByUser: User!
  updatedByUser: User!
}

enum TeamType {
  PERMANENT
  TEMPORARY
}

"""
Information about Team Player
"""
type TeamPlayerType {
  id: ID!
  userId: String!
  teamId: String!
  acceptedAt: DateTime
  status: TeamPlayerStatusType
  user: User!
}

enum TeamPlayerStatusType {
  ACCEPTED
  PENDING
  DECLINED
}

type Payment {
  id: ID!
  amount: Money
  isRefunded: Boolean!
  createdAt: DateTime!
}

"""
Information about an order.
"""
type Order {
  id: ID!
  eventId: ID!
  user: User!
  status: String!
  totalAmount: Int!
  refundedAmount: Int!
  currency: String!
  url: String!
  createdAt: DateTime!
  lineItems: [LineItem]!
  comment: String
  refundHistory: [Refund]!
  registrationLineItem: OrderRegistrationType
  team: Team
}

"""
Line Item of Order
"""
type LineItem {
  id: ID!
  orderId: ID!
  shopItem: ShopItem!
  quantity: Int!
  amountSubTotal: Int!
  amountTotal: Int!
  refundStatus: Boolean!
  isDelivered: Boolean!
}

"""
Information about a shop item.
"""
type ShopItem {
  id: ID!
  eventId: String!
  title: String!
  description: String
  productImage: EventShopItemImage
  link: String
  amount: Int!
  stock: Int!
  sales: Int!
  taxRate: TaxRate
  isPublished: Boolean!
  isAvailableAllEvents: Boolean!
  isDeletable: Boolean!
}

"""
Information about available images
"""
type EventShopItemImage {
  id: ID!
  imageUrl: String!
}

"""
Order Refund
"""
type Refund {
  id: String!
  amount: Int!
  currency: String!
  date: String!
  reason: String
}

"""
Registration Line Item of Order
"""
type OrderRegistrationType {
  hasTourPass: Boolean!
  amountSubTotal: Int!
  amountTotal: Int!
  refundStatus: Boolean!
  registration: SingleAndDoubleRegistration
}

union SingleAndDoubleRegistration = Registration | TeamRegistration

"""
Registration to Division
"""
type Registration {
  id: ID!
  date: DateTime!
  status: RegistrationStatus!
  createdAt: DateTime!
  statusUpdatedAt: DateTime!
  hasPaid: Boolean!
  division: Division!
  user: User!
  event: Event!
  logs: [RegistrationLog!]
  """
  Player in the event. Possible null if the registration is not accepted
          or if the player has been removed
  """
  player: Player
  message: String
  responses: [RegistrationQuestionResponse]
}

enum RegistrationStatus {
  PENDING
  ACCEPTED
  DECLINED
  USER_CANCELLED
  TEAM_CANCELLED
}

type RegistrationLog {
  id: ID!
  status: RegistrationStatus!
  actionedBy: User!
  createdAt: DateTime!
}

"""
Information about a Player
"""
type Player {
  id: ID!
  userId: ID!
  divisionId: ID!
  eventId: ID!
  isWildcard: Boolean!
  onSite: Boolean!
  hasPaid: Boolean!
  dnf: DNF!
  dns: DNS!
  eventTotal: Float
  registration: Registration!
  user: User!
  division: Division!
  event: Event!
  tiebreak: Tiebreak
  results(roundId: ID!): [Result!]
}

"""
Did not finish (DNF)
"""
type DNF {
  isDnf: Boolean!
  reportedByUserId: ID
  reportedByUser: User
}

"""
Did not start (DNS)
"""
type DNS {
  isDns: Boolean!
  reportedByUserId: ID
  reportedByUser: User
}

type Tiebreak {
  id: ID!
  place: Float!
  playerId: ID!
  player: Player!
}

type Result {
  id: ID!
  score: Float!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
  createdByUserId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  hash: String!
  createdByUser: User!
  updatedByUserId: ID!
  updatedByUser: User!
  isVerified: Boolean!
  verifiedByUserId: ID
  verifiedByUser: User
  playerConnection: GroupPlayerConnection!
  playerConnectionV2: GroupPlayerConnectionTypeCombined!
  hole: Hole!
}

"""
Information about a connection between a Group and a Player
"""
type GroupPlayerConnection {
  id: ID!
  """
  The Player's position(order) on the scorecard
  """
  position: Float!
  playerId: ID!
  groupId: ID!
  roundTotal: Float
  player: Player!
  hasSignedResult: Boolean!
  group: Group!
}

type Group {
  id: ID!
  status: GroupStatus!
  position: Float!
  startsAt: DateTime
  startHole: Hole
  pool: Pool!
  designatedSinglesScorer: User
  designatedTeamsScorer: Team
  playerConnections: [GroupPlayerConnection!]!
  results(isVerified: Boolean): [Result!]!
  playerConnectionsV2: [GroupPlayerConnectionTypeCombined!]!
  resultsV2(isVerified: Boolean): [Result!]
  marshall: User
}

enum GroupStatus {
  CLOSED
  OPEN
  DONE
}

"""
Information about Hole
"""
type Hole {
  id: ID!
  number: Float!
  par: Float
  name: String
  length: Float
  measureInMeters: Boolean
  note: String
  userNote: [HoleUserNote]
  hasOb: Boolean!
  hasMandatory: Boolean!
  hasHazard: Boolean!
  hasLocalRule: Boolean!
  geolocation: [Geolocation]
}

"""
Users private note about a hole
"""
type HoleUserNote {
  id: ID!
  holeId: ID!
  note: String!
  createdAt: DateTime!
}

type Geolocation {
  lat: Float!
  lng: Float!
}

"""
Information about Pool
"""
type Pool {
  id: ID!
  date: DateTime!
  status: PoolStatus!
  position: Float!
  name: String
  startMethod: PoolStartMethod!
  playFormat: PoolPlayFormat
  areGroupsPublic: Boolean!
  layoutVersion: LayoutVersion!
  round: Round!
  """
  Is false if status is PREPARE, ONGOING or COMPLETED
  """
  isDeletable: Boolean!
  """
  Groups are ordered by position ascending. If an ID is provided only the group containing that user / team is returned.
  """
  groups(userId: ID): [Group!]!
  """
  Caching result for 90 seconds
  """
  holeStats(divisionId: ID): [HoleStats!]
  """
  Caching result for 90 seconds
  """
  stats(divisionId: ID): Stats
  """
  If provided a userid returns a summary of the users stats for the pool. 
          Only applicable to singles events.
        
  """
  userStats(userId: ID!): Stats
  """
  Caching result for 60 seconds. Fixed pagination to 144 players. Can only be fetched if the pool is in status OPEN or PAUSE.
  """
  livescore(divisionId: ID, page: Int): PoolLivescoreDivisionCombined
  """

        Caching result for 0 seconds. Fixed pagination to 144 players. Can only be fetched while the pool is in status COMPLETED.
      
  """
  leaderboard(divisionId: ID, page: Int): PoolLeaderboardDivisionCombined
}

enum PoolStatus {
  CLOSED
  PREPARE
  OPEN
  PAUSE
  COMPLETED
}

enum PoolStartMethod {
  SHOTGUN
  TEETIME
}

enum PoolPlayFormat {
  BEST_SCORE
  BEST_SHOT
  MODIFIED_BEST_SHOT
  GREENSOME
  COMBINED_SCORE
  TOUGH_SHOT
  WORST_SHOT
}

type LayoutVersion {
  id: ID!
  version: Float!
  holes: [Hole!]!
  """
  This is `false` when there are groups created with this layout. When 'false' its not possible to add or remove holes but its still possible to update pars
  """
  canAddOrRemoveHoles: Boolean!
  """
  This is `true` when there are hole-results created with this layout.
  """
  hasResults: Boolean!
  isDeletable: Boolean!
  createdAt: DateTime!
  layout: Layout!
}

"""
Information about Layout
"""
type Layout {
  id: ID!
  published: Boolean!
  name: String!
  type: CourseType
  description: String
  baskets: String
  teepads: String
  color: LayoutColorType
  dogFriendly: Boolean
  wheelchairAccessible: Boolean
  strollerAccessible: Boolean
  cartAccessible: Boolean
  openForPlay: Boolean
  payToPlay: Boolean
  difficulty: LayoutDifficultyType
  upkeep: LayoutUpkeepType
  canBeDeleted: Boolean!
  course: Course
  reviewsCount(
    """
    Return reviews made after X.
    """
    start: DateTime
    """
    Return reviews made before Y.
    """
    end: DateTime
  ): Float!
  usersLatestReview: CourseLayoutReview
  reviews(
    """
    Return reviews made after X.
    """
    start: DateTime
    """
    Return reviews made before Y.
    """
    end: DateTime
    """
    Return the first x. Default is 20. Max is 50
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
  ): [CourseLayoutReview!]!
  ratings(
    """
    Return reviews made after X.
    """
    start: DateTime
    """
    Return reviews made before Y.
    """
    end: DateTime
    """
    Return the first x. Default is 20. Max is 50
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
  ): CourseLayoutRatings!
  versions: [LayoutVersion]!
  latestVersion: LayoutVersion!
}

enum CourseType {
  PUBLIC
  CUSTOM
}

enum LayoutColorType {
  WHITE
  BLACK
  GREEN
  BLUE
  RED
  ORANGE
  YELLOW
  GOLD
}

enum LayoutDifficultyType {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  PRO
}

enum LayoutUpkeepType {
  POOR
  DECENT
  GREAT
}

"""
Information about Course
"""
type Course {
  id: ID!
  name: String!
  address: String
  phone: String
  website: String
  description: String
  access: CourseAccessType
  paymentInformation: String
  type: CourseType
  geolocation: Geolocation
  facilities: [CourseFacility]
  isPublished: Boolean
  publicStats: Boolean
  layouts: [Layout!]!
  courseAdmins: [CourseAdministrator!]!
  casualUsageByWeekday(startDate: DateTime, endDate: DateTime): CourseWeekdayUsage!
  casualUsageByMonth(startDate: DateTime, endDate: DateTime): CourseMonthUsage!
  eventsByMonth(startDate: DateTime, endDate: DateTime): CourseMonthEvents!
}

enum CourseAccessType {
  PUBLIC
  PRIVATE
  RESERVE
}

"""
Information about Course
"""
type CourseFacility {
  id: ID!
  courseId: ID!
  name: String!
  type: CourseFacilityEnum!
  geolocation: Geolocation
}

enum CourseFacilityEnum {
  COURSE_SHOP
  GROCERY_STORE
  CAFE
  GAS_STATION
  WATER
  PARKING
  RESTAURANT
  INFORMATION
  RESTROOMS
  OTHER
}

"""
Information about a Course administrator
"""
type CourseAdministrator {
  userId: ID!
  courseId: ID!
  course: Course!
  role: CourseAdministratorRole!
  user: User!
}

enum CourseAdministratorRole {
  OWNER
  ADMIN
}

"""
Information about casual rounds per weekday
"""
type CourseWeekdayUsage {
  totalUsers: Float!
  monday: Float!
  tuesday: Float!
  wednesday: Float!
  thursday: Float!
  friday: Float!
  saturday: Float!
  sunday: Float!
}

"""
Information about casual rounds per weekday
"""
type CourseMonthUsage {
  totalUsers: Float!
  totalUniqueUsers: Float!
  totalScorecards: Float!
  january: Float!
  february: Float!
  march: Float!
  april: Float!
  may: Float!
  june: Float!
  july: Float!
  august: Float!
  september: Float!
  october: Float!
  november: Float!
  december: Float!
}

"""
Information about events on the course by month
"""
type CourseMonthEvents {
  totalPlayers: Float!
  uniquePlayers: Float!
  totalEvents: Float!
  totalRounds: Float!
  sanctionedEvents: Float!
}

"""
Reviews for a specific layout
"""
type CourseLayoutReview {
  id: ID!
  layoutId: ID!
  layoutVersionId: ID!
  user: User!
  review: String
  rating: Float
  teepads: Float
  baskets: Float
  upkeep: Float
  navigation: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Ratings for various aspects of the layout
"""
type CourseLayoutRatings {
  layout: Float
  teepads: Float
  baskets: Float
  upkeep: Float
  navigation: Float
}

"""
Information about Round
"""
type Round {
  id: ID!
  """
  CLOSED=All pools are closed, COMPLETED=all pools are completed, ONGOING=If any pool are prepare or open
  """
  status: RoundStatus!
  """
  Is false if status is ONGOING or COMPLETED
  """
  isDeletable: Boolean!
  event: Event!
  """
  Pools are ordered by position ascending
  """
  pools: [Pool!]!
}

enum RoundStatus {
  CLOSED
  ONGOING
  COMPLETED
}

type HoleStats {
  id: ID!
  number: Float!
  name: String
  par: Float!
  averageScore: Float!
  aces: StatsDetail!
  circleHits: StatsDetail!
  circleHitConversions: StatsDetail!
  insidePutts: StatsDetail!
  outsidePutts: StatsDetail!
  outOfBounds: StatsDetail!
  eagles: StatsDetail!
  birdies: StatsDetail!
  pars: StatsDetail!
  bogeys: StatsDetail!
  doubleBogeys: StatsDetail!
  trippleBogeysAbove: StatsDetail!
}

type StatsDetail {
  count: Float!
  part: Float!
}

"""
Stats
"""
type Stats {
  aces: StatsDetail!
  circleHits: StatsDetail!
  circleHitConversions: StatsDetail!
  insidePutts: StatsDetail!
  outsidePutts: StatsDetail!
  outOfBounds: StatsDetail!
  eagles: StatsDetail!
  birdies: StatsDetail!
  pars: StatsDetail!
  bogeys: StatsDetail!
  doubleBogeys: StatsDetail!
  trippleBogeysAbove: StatsDetail!
  throwCount: Float!
  holesPlayed: Float!
  layoutsPlayed: Float!
  coursesPlayed: Float!
  totalPar: Float
}

union PoolLivescoreDivisionCombined = PoolLivescoreDivision | PoolLivescoreDivisionTeam

type PoolLivescoreDivision {
  id: ID!
  name: String!
  type: String!
  players: [PoolLivescorePlayer!]!
  totalPlayers: Float!
}

type PoolLivescorePlayer {
  place: Float!
  placeChange: Float
  playerId: ID!
  userId: ID!
  firstName: String!
  lastName: String!
  profileImageUrl: String
  pdgaNumber: Float
  startsAt: DateTime
  isDnf: Boolean!
  isDns: Boolean!
  totalScore: Float
  totalPar: Float
  stats: Stats
  results: [PoolLivescoreResult!]!
}

type PoolLivescoreResult {
  id: ID!
  score: Float!
  holeId: ID!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
}

type PoolLivescoreDivisionTeam {
  id: ID!
  name: String!
  type: String!
  players: [PoolLivescoreTeamPlayer!]!
  totalPlayers: Float!
}

type PoolLivescoreTeamPlayer {
  place: Float!
  placeChange: Float
  team: Team!
  startsAt: DateTime
  dnfDns: String
  totalScore: Float
  totalPar: Float
  stats: Stats
  results: [PoolLivescoreResult!]!
}

union PoolLeaderboardDivisionCombined = PoolLeaderboardDivision | PoolLeaderboardDivisionTeam

type PoolLeaderboardDivision {
  id: ID!
  name: String!
  type: String!
  players: [PoolLeaderboardPlayer!]!
  totalPlayers: Float!
}

type PoolLeaderboardPlayer {
  place: Float!
  playerId: ID!
  userId: ID!
  firstName: String!
  lastName: String!
  profileImageUrl: String
  pdgaNumber: Float
  pdgaRating: Float
  isDnf: Boolean!
  isDns: Boolean!
  score: Float
  par: Float
  points: Float
  results: [SimpleResult!]!
}

type SimpleResult {
  id: ID!
  score: Float!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
  hole: Hole!
}

type PoolLeaderboardDivisionTeam {
  id: ID!
  name: String!
  type: String!
  players: [PoolLeaderboardTeamPlayer!]!
  totalPlayers: Float!
}

type PoolLeaderboardTeamPlayer {
  place: Float!
  team: Team!
  isDnfDns: Boolean
  dnfOrDns: String
  score: Float
  par: Float
  points: Float
  results: [SimpleResult!]!
}

union GroupPlayerConnectionTypeCombined = GroupPlayerConnection | GroupTeamPlayerConnection

"""
Information about a connection between a Group and a Team Player
"""
type GroupTeamPlayerConnection {
  id: ID!
  """
  The Team Player's position(order) on the scorecard
  """
  position: Float!
  teamPlayerId: ID!
  groupId: ID!
  teamPlayer: TeamPlayer!
  roundTotal: Float
  hasSignedResult: Boolean!
  group: Group!
}

"""
Information about a Team Player
"""
type TeamPlayer {
  id: ID!
  teamId: ID!
  divisionId: ID!
  eventId: ID!
  isWildcard: Boolean!
  onSite: Boolean!
  hasPaid: Boolean!
  dnfDns: DNFDNS!
  registration: TeamRegistration!
  team: Team!
  division: Division!
  event: Event!
  eventTotal: Float
  tiebreak: Tiebreak
}

"""
Did not finish (DNF) - Did not start (DNS)
"""
type DNFDNS {
  dnfDns: String
  dnfDnsErType: String
  reportedById: ID
}

"""
Team registration to Event & Division
"""
type TeamRegistration {
  id: ID!
  date: DateTime!
  status: RegistrationStatus!
  createdAt: DateTime!
  statusUpdatedAt: DateTime!
  division: Division!
  team: Team!
  hasPaid: Boolean!
  """
  Team Player in the event. Possible null if the registration is not accepted
          or if the player has been removed
  """
  player: TeamPlayer
  event: Event!
  logs: [RegistrationLog!]
  message: String
  responses: [RegistrationQuestionResponse]
}

"""
Response give by user to a specific question
"""
type RegistrationQuestionResponse {
  id: ID!
  eventRegistrationId: ID
  question: String!
  response: String
  options: [RegistrationQuestionOption]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Option attached to a registration question
"""
type RegistrationQuestionOption {
  id: ID!
  questionId: ID!
  value: String!
  position: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamTourPass {
  id: ID!
  team: Team!
  tour: Tour!
  division: Division!
  payment: Payment!
  order: Order
  createdAt: DateTime
}

type StripeConnectedAccount {
  id: ID!
  name: String
  createdAt: DateTime!
  owner: User!
  taxRates: [TaxRate]!
}

enum TourStatus {
  CLOSED
  ONGOING
  COMPLETED
}

"""
Information about an administrator
"""
type Administrator {
  userId: ID!
  tourId: ID!
  role: AdministratorRole!
  user: User!
  tour: Tour!
}

enum AdministratorRole {
  OWNER
  ADMIN
}

type StatsLeaderboard {
  bestRound: StatsLeaderboardTop
  mostAces: StatsLeaderboardTop
  mostEagles: StatsLeaderboardTop
  mostBirdies: StatsLeaderboardTop
  mostPars: StatsLeaderboardTop
  mostCircleHits: StatsLeaderboardTop
  mostCircleHitConversions: StatsLeaderboardTop
  mostInsidePutts: StatsLeaderboardTop
  mostOutsidePutts: StatsLeaderboardTop
  leaderboardCount: Float!
  leaderboard: [StatsLeaderboardPlayer]
}

type StatsLeaderboardTop {
  user: User
  team: Team
  par: Float
  part: Float
  count: Float
}

type StatsLeaderboardPlayer {
  position: Float!
  user: User
  team: Team
  division: Division!
  bestRound: BestTourRound
  birdies: TourStat
  pars: TourStat
  aces: TourStat
  eagles: TourStat
  bogeys: TourStat
  doubleBogeys: TourStat
  trippleBogeysAbove: TourStat
  circleHits: TourStat
  circleHitConversions: TourStat
  insidePutts: TourStat
  outsidePutts: TourStat
  outOfBounds: TourStat
}

type BestTourRound {
  roundId: ID!
  par: Float!
}

type TourStat {
  count: Float!
  part: Float!
}

enum SortOrderType {
  ASC
  DESC
}

enum TourStatsOrderByInput {
  BEST_ROUND
  ACE
  EAGLE
  BIRDIE
  PAR
  BOGEY
  DOUBLE_BOGEY
  TRIPLE_BOGEY_ABOVE
  CIRCLE_HIT
  CIRCLE_HIT_CONVERSION
  INSIDE_PUTT
  OUTSIDE_PUTT
  OUT_OF_BOUNDS
}

type TourLeaderboardDivision {
  id: ID!
  name: String!
  type: String!
  leaderboardCount: Float!
  players: [TourLeaderboardDivisionTypeCombined!]!
}

union TourLeaderboardDivisionTypeCombined = TourLeaderboardPlayer | TourLeaderboardTeamPlayer

type TourLeaderboardPlayer {
  place: Float!
  userId: ID!
  firstName: String!
  lastName: String!
  profileImageUrl: String
  pdgaNumber: Float
  pdgaRating: Float
  score: Float
  averageScore: Float
  par: Float
  points: Float
  eventScores: [TourLeaderboardEvent]!
}

type TourLeaderboardEvent {
  eventId: ID!
  place: Float!
  score: Float!
  par: Float!
  points: Float!
  noResults: Boolean
}

type TourLeaderboardTeamPlayer {
  place: Float!
  team: Team!
  score: Float
  averageScore: Float
  par: Float
  points: Float
  eventScores: [TourLeaderboardEvent]!
}

enum EventsScoringType {
  AVERAGE_THROWS
  PAR
  POINTS
  CUSTOM_POINTS
  THROWS
}

"""
Message posted by an Admin for the event audience
"""
type EventCustomPointsMap {
  id: ID!
  tourId: ID!
  eventId: ID
  positions: [EventCustomPoint]!
  defaultPoint: Float!
  tiePoints: TiePoint!
  createdAt: Float!
  updatedAt: Float!
}

"""

"""
type EventCustomPoint {
  place: Float!
  points: Float!
}

enum TiePoint {
  HIGHEST
  LOWEST
  AVERAGE
}

"""
Information about an organization
"""
type Organization {
  id: ID!
  administrators: [OrganizationAdministrator]!
  usersMembership: OrganizationMember
  type: OrganizationType!
  acceptMembers: AcceptMembers!
  tours: [Tour]!
  connectedOrganizationsCountByStatus: OrganizationConnectedOrganizationsCount!
  """
  Only applicable for ASSOCIATION typed organizations
  """
  pendingConnectedOrganizations: [Organization]!
  """
  Only applicable for ASSOCIATION typed organizations
  """
  connectedOrganizations(
    """
    Return the first x. Default is 10. Max is 50
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
  ): [Organization]!
  """
  Not applicable for ASSOCIATION type organizations
  """
  connectedOrganization: Organization
  organizationConnectionStatus: OrganizationConnectionStatus
  organizationConnectionUpdatedAt: DateTime!
  publicMembersList: Boolean!
  hidden: Boolean!
  name: String!
  slug: String!
  logoUrl: String
  coverImageUrl: String
  contactName: String
  contactMail: String
  contactPhone: String
  contactWebsite: String
  officials: [OrganizationOfficialType]!
  shopItems: [ShopItem]!
  pendingMembers: [OrganizationMember]!
  memberCountByStatus: OrganizationMemberCount!
  members(
    """
    Return the first x. Default is 10. Max is 50
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
    """
    Searches in firstName, lastName, email
    """
    search: String
  ): [OrganizationMember]!
  """
  Counting members with either of statuses ACTIVE, EXPIRED, PENDING_PAYMENT
  """
  membersCount: Float!
  """
  Only available for the Admin
  """
  contactList: [OrganizationContactList!]!
  courseRelations: [OrganizationCourseRelation]!
  membershipTypes: [OrganizationMemberType]!
  sections: [OrganizationContent]!
  news(
    """
    Return the first x. Default is 10. Max is 50
    """
    first: Float
    """
    Skip x. Default is 0.
    """
    skip: Float
    """
    ASC or DESC, DESC is default
    """
    order: SortOrderType
  ): [OrganizationContent]!
  connectedAccount: StripeConnectedAccount
  """
  Organizations currency
  """
  currency: String!
  city: City
  orders(
    """
    Return the first x orders. Default is 10
    """
    first: Int = 10
    """
    Skip x. Default is 0.
    """
    skip: Int = 0
  ): [MembershipOrder]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Information about an Organization administrator
"""
type OrganizationAdministrator {
  role: OrganizationAdministrationRole!
  user: User!
  organization: Organization!
}

"""
Roles for an organization
"""
enum OrganizationAdministrationRole {
  ADMIN
  OWNER
}

"""
Information about an organizations member
"""
type OrganizationMember {
  id: ID!
  membershipType: OrganizationMemberType!
  organization: Organization!
  user: User!
  status: ID!
  usersMainClub: Boolean!
  usersMainClubUpdatedAt: DateTime
  expiresAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Information about an organizations member
"""
type OrganizationMemberType {
  id: ID!
  name: String!
  description: String!
  fee: Float!
  fullMember: Boolean!
  archived: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OrganizationType {
  CLUB
  BUSINESS
  ASSOCIATION
  TEAM
}

enum AcceptMembers {
  DIRECT
  APPROVAL
  INVITATION
  CLOSED
}

"""
Information about an organizations number of connections with each status
"""
type OrganizationConnectedOrganizationsCount {
  cancelled: Float!
  rejected: Float!
  approved: Float!
  pendingApproval: Float!
}

enum OrganizationConnectionStatus {
  PENDING_APPROVAL
  APPROVED
  REJECTED
  CANCELLED
}

"""
Information about an organizations member
"""
type OrganizationOfficialType {
  id: ID!
  role: String!
  email: String
  phone: String
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Information about an organizations number of members with each status
"""
type OrganizationMemberCount {
  pendingReview: Float!
  pendingPayment: Float!
  active: Float!
  expired: Float!
}

"""
Member contact information for the administrators
"""
type OrganizationContactList {
  membershipTypeId: ID!
  userId: ID!
  profileImageUrl: String
  firstName: String!
  lastName: String!
  pdgaNumber: Float
  pdgaRating: Float
  phone: String
  email: String!
}

"""
Information about an organizations relation to a specific course
"""
type OrganizationCourseRelation {
  id: ID!
  course: Course!
  type: OrganizationCourseRelationType!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
The relations an organization can have to a course
"""
enum OrganizationCourseRelationType {
  HOME_COURSE
  EVENT_ORGANIZER
  MAINTAINER
}

"""
Information about an organizations content
"""
type OrganizationContent {
  id: ID!
  organization: Organization!
  type: OrganizationContentType!
  audience: OrganizationContentAudience!
  title: String!
  published: Boolean!
  position: Float
  body: String!
  attachments: [OrganizationConentDocument]!
  createdBy: User!
  createdAt: DateTime!
  updatedBy: User!
  updatedAt: DateTime!
}

"""
Audience for an organizations content
"""
enum OrganizationContentType {
  SECTION
  NEWS
}

"""
Audience for an organizations content
"""
enum OrganizationContentAudience {
  MEMBER
  PUBLIC
}

"""
Uploaded documents available on this content
"""
type OrganizationConentDocument {
  id: ID!
  documentType: EventDocumentType!
  url: String!
  createdBy: User!
  createdAt: DateTime!
}

enum EventDocumentType {
  DOCUMENT
  IMAGE
}

type City {
  id: ID!
  name: String!
  country: String!
  county: String!
  geolocation: Geolocation!
}

"""
Information about an order.
"""
type MembershipOrder {
  id: ID!
  user: User!
  status: String!
  totalAmount: Int!
  refundedAmount: Int!
  currency: String!
  url: String!
  createdAt: DateTime!
  comment: String
  refundHistory: [Refund]!
}

enum PackageTierEnum {
  FREE
  ESSENTIAL
  PRO
}

"""
Information about transferring subscription ownership
"""
type TransferTourOwnershipType {
  id: String!
  transferToken: String!
  status: String!
  email: String!
  expiresAt: DateTime
  createdAt: DateTime
}

"""
Uploaded documents available on this event
"""
type EvenDocument {
  id: ID!
  eventId: String!
  documentType: EventDocumentType!
  displayName: String!
  url: String!
  tourAvailable: Boolean!
  createdBy: User!
  createdAt: DateTime!
}

type PdgaEventType {
  name: String!
  type: PdgaEventTypeEnum!
}

enum PdgaEventTypeEnum {
  PDGA_A
  PDGA_B
  PDGA_C
  PDGA_X
  PDGA_L
}

"""

    Only a toggle used by fontend for sorting waitinglist, no API logic impact.
    * Combined creates one big waitingllist in ascending order based on registration.
    * Division sorts ascending order but grouped by division.
  
"""
type WaitinglistType {
  name: String!
  type: WaitingListTypeEnum!
}

enum WaitingListTypeEnum {
  DIVISION
  COMBINED
}

type EventRegistrationInvitation {
  id: ID!
  eventId: ID!
  event: Event!
  status: EventRegistrationInvitationStatus!
  acceptedByUser: User
  createdByUser: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum EventRegistrationInvitationStatus {
  PENDING
  USED
  CANCELLED
}

"""
Contact information to the players in an event for the TD
"""
type EventContactList {
  userId: String!
  registrationStatus: RegistrationStatus!
  profileImageUrl: String
  firstName: String!
  lastName: String!
  club: String
  mainClubSlug: String
  mainClubName: String
  organizationMemberships: [OrganizationMember]!
  mainClubChangedAt: DateTime
  pdgaNumber: Float
  pdgaRating: Float
  phone: String
  email: String!
  team: Team
}

enum EventStatus {
  CLOSED
  ONGOING
  COMPLETED
}

type GroupRegistrationReservation {
  id: ID!
  expireAt: DateTime!
  group: Group!
  user: User!
  event: Event!
}

"""
Information about mount  registrations for an event in total and per division.
"""
type EventRegistrationCount {
  totalAccepted: Float!
  totalWaiting: Float!
  totalCancelled: Float!
  countPerDivision: [PlayerCount]!
}

"""
Information about a Player
"""
type PlayerCount {
  divisionId: ID!
  totalCount: Float!
  acceptedCount: Float!
  waitingCount: Float!
  cancelledCount: Float!
}

"""
Showing some meta data for the event messages without fetching the messages themselves.
"""
type EventMessageCount {
  accepted: Float!
  pending: Float!
  public: Float!
  availableToUser: Float!
  readByUser: Float!
}

"""
Message posted by an Admin for the event audience
"""
type EventMessage {
  id: String!
  eventId: String!
  subject: String!
  message: String!
  messageType: String!
  userReadReceipt: ReadReceipt
  audience: String!
  replies: [EventMessageReply!]!
  repliesCount: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  author: User!
  updatedBy: User!
}

type ReadReceipt {
  id: ID!
  userId: ID!
  messageId: ID!
  readAt: String!
}

"""
Replies to event messages, can be nested one level. Also using a soft delete to ensure nesting and history can be preserved
"""
type EventMessageReply {
  id: String!
  eventMessageId: String!
  parentMessageId: String
  message: String!
  replies: [EventMessageReply!]!
  repliesCount: Float!
  isDeleted: Boolean!
  createdAt: DateTime!
  createdBy: User!
  updatedAt: DateTime!
  updatedBy: User!
}

type RegistrationStage {
  id: ID!
  date: DateTime!
  active: Boolean!
  criterias: [RegistrationCriteria]!
  division: Division!
}

type RegistrationCriteria {
  id: ID!
  type: RegistrationCriteriaType!
  value: String
}

enum RegistrationCriteriaType {
  OPEN_FOR_ALL
  MIN_PDGA_RATING
  MAX_PDGA_RATING
  PDGA_NUMBER
}

type Tie {
  eventId: ID!
  divisionId: ID!
  place: Float!
  score: Float
  players: [Player!]!
  event: Event!
  division: Division!
}

union EventLeaderboardDivisionCombined = EventLeaderboardDivision | EventLeaderboardDivisionTeam

type EventLeaderboardDivision {
  id: ID!
  name: String!
  type: String!
  players: [EventLeaderboardPlayer!]!
  totalPlayers: Float!
}

type EventLeaderboardPlayer {
  place: Float!
  playerId: ID!
  userId: ID!
  profileImageUrl: String
  firstName: String!
  lastName: String!
  pdgaNumber: Float
  pdgaRating: Float
  isDnf: Boolean!
  isDns: Boolean!
  score: Float
  par: Float
  points: Float
  poolLeaderboards: [EventLeaderboardPool!]!
}

type EventLeaderboardPool {
  place: Float!
  score: Float
  par: Float
  points: Float
  poolId: ID!
}

type EventLeaderboardDivisionTeam {
  id: ID!
  name: String!
  type: String!
  players: [EventLeaderboardTeamPlayer!]!
  totalPlayers: Float!
}

type EventLeaderboardTeamPlayer {
  eventTeamId: ID!
  place: Float!
  team: Team!
  dnfDns: String
  isDnfDns: Boolean
  score: Float
  par: Float
  points: Float
  poolTeamLeaderboards: [EventTeamLeaderboardPool!]!
}

type EventTeamLeaderboardPool {
  place: Float!
  score: Float
  par: Float
  points: Float
  poolId: ID!
}

type EventStatsLeaderboard {
  bestRound: StatsLeaderboardTop
  mostAces: StatsLeaderboardTop
  mostEagles: StatsLeaderboardTop
  mostBirdies: StatsLeaderboardTop
  mostPars: StatsLeaderboardTop
  mostCircleHits: StatsLeaderboardTop
  mostCircleHitConversions: StatsLeaderboardTop
  mostInsidePutts: StatsLeaderboardTop
  mostOutsidePutts: StatsLeaderboardTop
  leaderboardCount: Float!
  leaderboard: [EventStatsLeaderboardPlayer]
}

type EventStatsLeaderboardPlayer {
  position: Float!
  user: User
  team: Team
  division: Division!
  bestRound: BestTourRound
  birdies: TourStat
  pars: TourStat
  aces: TourStat
  eagles: TourStat
  bogeys: TourStat
  doubleBogeys: TourStat
  trippleBogeysAbove: TourStat
  circleHits: TourStat
  circleHitConversions: TourStat
  insidePutts: TourStat
  outsidePutts: TourStat
  outOfBounds: TourStat
}

type GeneralOrderType {
  free: [FreeOrder]
  paid: [Order]
}

"""
Information about free order.
"""
type FreeOrder {
  id: ID!
  eventId: ID!
  user: User!
  lineItems: [FreeLineItem]!
  registration: Registration
  comment: String
  createdAt: DateTime!
}

"""
Free Line Item of Order
"""
type FreeLineItem {
  id: ID!
  orderId: ID!
  shopItem: ShopItem!
  quantity: Int!
  isDelivered: Boolean!
}

enum OrderContentType {
  ALL
  ITEM
  REGISTRATION
}

union UserEventMetaTypeCombined = EventUserMeta | EventTeamMeta

"""
Meta information about the user in this event.
"""
type EventUserMeta {
  groups: [Group!]!
  registration: Registration
  favourite: FavouriteEvent
}

"""
Meta information about the users team in this event.
"""
type EventTeamMeta {
  groups: [Group!]!
  registrations: [TeamRegistration]!
  favourite: FavouriteEvent
}

type DivisionInPoolType {
  poolId: ID!
  divisionId: ID!
}

"""
Question asked players registering to an event.
"""
type RegistrationQuestion {
  id: ID!
  eventId: ID!
  position: Float!
  question: String!
  questionType: RegistrationQuestionVariant!
  mandatory: Boolean!
  options: [RegistrationQuestionOption]!
  exclusiveToDivisions: [Division]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum RegistrationQuestionVariant {
  FREE_TEXT
  MULTI_ANSWER
  MULTI_CHOICE
}

"""
Country restrictions for this event, primarily used in the registration process
"""
type EventCountryRestriction {
  id: ID!
  eventId: ID
  countryCode: CountryCode
  countryName: String
  isBlackList: Boolean
}

union UserRegistrationsCombined = Registration | TeamRegistration

input RegistrationFilterMetaInput {
  operator: FilterOperator = AND
  query: [RegistrationFilterInput!]!
}

enum FilterOperator {
  OR
  AND
}

input RegistrationFilterInput {
  status: RegistrationStatus
  before: DateTime
  after: DateTime
}

input PoolFilterMetaInput {
  operator: FilterOperator = AND
  query: [PoolFilterInput!]!
}

input PoolFilterInput {
  status: PoolStatus!
}

input GroupsFilterInput {
  operator: FilterOperator = AND
  query: [GroupsFilterMetaInput!]!
}

input GroupsFilterMetaInput {
  operator: FilterOperator = AND
  groupStatus: GroupStatus
  poolStatus: PoolStatus
}

type Scorecard {
  id: ID!
  date: DateTime!
  status: ScorecardStatus!
  playFormat: ScorecardPlayFormat!
  """
  Current number of results
  """
  currentResultsCount: Float!
  """
  Bumber of results when all players have played all holes
  """
  maxResultsCount: Float!
  layoutVersion: LayoutVersion!
  startHole: Hole!
  players: [ScorecardPlayer!]!
  createdAt: DateTime!
  createdById: ID!
}

enum ScorecardStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ScorecardPlayFormat {
  STANDARD
  PRACTICE
  MULLIGAN
  BEST_SHOT
  MODIFIED_BEST_SHOT
  GREENSOME
  TOUGH_SHOT
  WORST_SHOT
  TWO_DISC
  THREE_DISC
  X_DISC
  MATCH_PLAY
}

type ScorecardPlayer {
  id: ID!
  position: Float!
  user: TeamAndUserAndAnonymousUser!
  results: [ScorecardResult!]!
}

union TeamAndUserAndAnonymousUser = User | AnonymousUser | Team

type AnonymousUser {
  id: ID!
  name: String!
  isAnonymous: Boolean!
}

type ScorecardResult {
  id: ID!
  score: Float!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
  hole: Hole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ScorecardFilterMetaInput {
  operator: FilterOperator = AND
  query: [ScorecardFilterInput!]!
}

input ScorecardFilterInput {
  status: ScorecardStatus!
}

"""
Information about subscription
"""
type SubscriptionWithPackage {
  id: String!
  subscriptionId: String
  status: String!
  recurrence: Recurrence!
  currentPeriodStart: Int
  currentPeriodEnd: Int
  startDate: Int
  endDate: Int
  cancelDate: Int
  monthlyFee: String
  yearlyFee: String
  currency: String
  tier: PackageTierEnum
}

enum Recurrence {
  MONTHLY
  ANNUALLY
}

input ToursFilterInput {
  operator: FilterOperator = AND
  query: [ToursFilterMetaInput!]!
}

input ToursFilterMetaInput {
  operator: FilterOperator = AND
  status: TourStatus
}

"""
Information about Event Search
"""
type EventSearchResultType {
  numberOfResults: Int!
  resultsPerPage: Int!
  results: [EventSearchType!]!
}

"""
Information about Event
"""
type EventSearchType {
  id: ID!
  name: String!
  singles: Boolean!
  teamSize: Float!
  startDate: DateTime!
  endDate: DateTime!
  registrationOpenAt: DateTime
  registrationCloseAt: DateTime
  isRegistrationOpen: Boolean!
  cityName: String
  cityCounty: String
  cityCountry: String
  cityGeolocation: Geolocation
  tourName: String
  tourType: String
  pdgaType: String
  rounds: [EventRoundSearchType]!
}

"""
Information about Event Round
"""
type EventRoundSearchType {
  pools: [EventRoundPoolSearchType]!
}

"""
Information about Event Round Pool
"""
type EventRoundPoolSearchType {
  date: String
  courseName: String
  courseGeolocation: Geolocation
}

input EventSearchDateInputType {
  from: DateTime
  to: DateTime
}

enum EventSearchSortInputType {
  DATE
  DISTANCE
}

input EventSearchDistanceInputType {
  geolocation: GeolocationInput!
  """
  max distance from geolocation in km
  """
  maxDistance: Float
}

input GeolocationInput {
  lng: Float!
  lat: Float!
}

enum EventPlayersOrderByInput {
  firstName
  pdgaNumber
  pdgaRating
  createdAt
  onSite
}

enum EventRegistrationsOrderByInput {
  firstName
  pdgaNumber
  pdgaRating
  createdAt
}

enum EventTeamsOrderByInput {
  firstName
  pdgaNumber
  pdgaRating
  createdAt
  onSite
}

input NameAndDistanceInput {
  search: String
  geolocation: GeolocationInput
}

"""
Information about Course
"""
type SearchCourse {
  id: ID!
  name: String!
  address: String
  phone: String
  website: String
  type: CourseType
  """
  Distance in KM
  """
  distance: Float
  geolocation: Geolocation
  facilities: [CourseFacility]
  layouts: [Layout!]!
  courseAdmins: [CourseAdministrator!]!
}

type DivisionTypeItem {
  id: ID!
  position: Float!
  name: String!
  type: String!
  canBeGenderLocked: Boolean!
  canBeAgeRestricted: Boolean!
  ageRequirement: Float
}

type EventMessageAudience {
  name: String!
  type: EventMessageAudienceEnum!
}

enum EventMessageAudienceEnum {
  PUBLIC
  ACCEPTED
  PENDING
  PERSONAL
}

type EventMessageTypeType {
  name: String!
  type: EventMessageTypeEnumType!
}

enum EventMessageTypeEnumType {
  EVENT_POST
  EVENT_MESSAGE_REPLY
  EVENT_MESSAGE_COMMENT
}

"""
Public information about the specified user
"""
type PublicUser {
  id: ID!
  firstName: String
  lastName: String
  profile: PublicUserProfile!
  teams: [Team]!
}

"""
Detailed information about a user
"""
type PublicUserProfile {
  id: ID!
  club: String
  mainClubName: String
  mainClubSlug: String
  pdgaNumber: Float
  pdgaRating: Float
  country: Country
  instagram: String
  facebook: String
  twitter: String
  youtube: String
  tiktok: String
  sponsor: String
  biography: String
  profileImageUrl: String
  """
  Used to determine if the profile details should be visible to other users
  """
  isPublic: Boolean
}

"""
See more info at https://en.wikipedia.org/wiki/ISO_4217
"""
type Currency {
  name: String!
  """
  3-letter ISO-4217 code.
  """
  code: String!
  digits: Float!
  isEnabledForPayments: Boolean!
}

type Meta {
  apiVersion: String!
}

"""
Information about subscription
"""
type ManageSubscription {
  url: String!
}

"""
Information about package prices
"""
type PackagePrices {
  id: String!
  currency: String
  monthlyFee: Int!
  yearlyFee: Int!
  isActive: Boolean
}

type RootMutation {
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  AddAdministratorByEmail(tourId: ID!, email: String!, asRole: MutationUserRoleType): Administrator
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  AddAdministratorById(tourId: ID!, userId: ID!, asRole: MutationUserRoleType): Administrator
  """

      Add an anonymous user to a scorecard
    
  """
  AddAnonymousUserToScorecard(name: String!, scorecardId: ID!): ScorecardPlayer
  """

      Adds a marshall to the group. Can only be called by Admins

      ErrorCodes:
        * GROUP_HAS_MARSHALL - Group already has an assigned Marshall
        * PLAYER_IN_GROUP_CANT_BE_MARSHALL - Player in group cant be marshall
    
  """
  AddGroupMarshall(groupId: ID!, userId: String!): Group
  """

      Add player to a group

      ErrorCodes:
        * INVALID_POOL_STATUS - Cant add a player to group if pool is completed
        * INVALID_FORMAT - Wrong players in the ordering list
    
  """
  AddPlayerToGroup(groupId: ID!, playerId: ID!, playerOrder: [ID!]): Player
  """

      Add team player to a group

      ErrorCodes:
        * INVALID_POOL_STATUS - Cant add a player to group if pool is completed
        * INVALID_FORMAT - Wrong players in the ordering list
    
  """
  AddTeamPlayerToGroup(groupId: ID!, playerId: ID!, playerOrder: [ID!]): TeamPlayer
  """

    roles: [TOUR_ADMIN, SUPER_ADMIN]

    ErrorCodes:
      * USER_ALREADY_A_PLAYER - User is already added to event
      * EVENT_MAX_SPOTS_REACHED - No free spot in the event
      * POOL_IS_OPEN - Cant add a player after a pool has been started in the event

  """
  AddUserToEvent(divisionId: ID!, eventId: ID!, userId: ID!, asRole: MutationUserRoleType): Player
  """

    roles: [TOUR_ADMIN, SUPER_ADMIN]

    ErrorCodes:
      * TEAM_ALREADY_A_PLAYER - Team is already added to event
      * EVENT_MAX_SPOTS_REACHED - No free spot in the event
      * POOL_IS_OPEN - Cant add a player after a pool has been started in the event

  """
  AddTeamToEvent(divisionId: ID!, eventId: ID!, teamId: ID!, asRole: MutationUserRoleType): TeamPlayer
  """

      Add an existing user to a scorecard. Only the owner of the scorecard can call this mutation

      ErrorCodes:
        * USER_ALREADY_A_PLAYER - User is already a player
    
  """
  AddUserToScorecard(userId: ID!, scorecardId: ID!): ScorecardPlayer
  """

      Add an existing team to a scorecard. Only the owner of the scorecard can call this mutation
      ErrorCodes:
        * TEAM_ALREADY_A_PLAYER - Team is already a player
    
  """
  AddTeamToScorecard(teamId: ID!, scorecardId: ID!): ScorecardPlayer
  """

      Accept an invitation. This will bypass all registration stages and event registration status to place the user in the waitinglist or specified group.
      If used with group registration some restrictions apply. Groups must be public and event cannot have started its first pool.
    
  """
  AcceptRegistrationInvitation(invitationId: ID!, divisionId: ID!, groupId: ID, teamId: ID): Registration
  """

      Anonymize an account, removes all personal data and disable login but preserves holes scores. 
      Callable by super-admins and users if they provide correct current password.
    
  """
  AnonymizeAccount(userId: ID!, asRole: MutationUserRoleType, password: String): User
  """

      Used by players to cancel their registration. Can only be used when the status of pools are closed

      ErrorCodes:
        * POOL_NOT_CLOSED - The event has atleast one ongoing pool
        * REGISTRATION_IS_DECLINED - The registration cant be cancelled because it is declined
    
  """
  CancelRegistration(registrationId: ID!): Registration
  """

      Used by team players to cancel their registration. Can only be used when the status of pools are closed

      ErrorCodes:
        * POOL_NOT_CLOSED - The event has atleast one ongoing pool
        * REGISTRATION_IS_DECLINED - The registration cant be cancelled because it is declined
    
  """
  CancelTeamRegistration(registrationId: ID!): TeamRegistration
  """
  Change password for the current user
  """
  ChangePassword(currentPassword: String!, newPassword: String!): Boolean
  """

    Used by group-members to close(set the status to DONE) the group when scoring is done

      ErrorCodes:
        * GROUP_HAS_UNVERIFIED_RESULTS - Verify mode and unverified results
        * GROUP_HAS_UNSIGNED_RESULTS - Sign result is enabled and not all players have signed their result
        * PLAYER_NOT_PART_OF_GROUP - Current user is not part of group
        * POOL_NOT_OPEN - Pool is not open
        * PLAYERS_MISSING_SCORE - Player(s) are missing score
    
  """
  CloseGroup(groupId: ID!, confirmDnf: Boolean, asRole: MutationUserRoleType): Group
  """

      Registers the current logged in user to an event

      ErrorCodes:
        * STRIPE_TOKEN_ALREADY_USED - token already used
        * STRIPE_CONNECTION_ERROR - Connection error
        * STRIPE_INCORRECT_CVC - Incorrect cvc
        * STRIPE_INCORRECT_CARD_NUMBER - Incorrect card number
        * STRIPE_INSUFFICIENT_FUNDS - Insufficient funds on card
        * STRIPE_CARD_DECLINED - Card declined
        * STRIPE_CARD_ERROR - Generic card error
        * STRIPE_UNKNOWN_ERROR - Stripe returned an unknown error
    
  """
  ConfirmEventRegistrationPayment(paymentIntentId: ID!, stripePaymentIntentId: ID!): Registration
  CreateAccount(input: CreateAccountInput!): User
  """

      ErrorCodes:
        * EMAIL_NOT_FOUND - Email not found
        * ACCOUNT_DISABLED - Account is disabled
        * INCORRECT_PASSWORD - Incorrect password
    
  """
  CreateAuthToken(email: String!, password: String!): AuthToken
  """

    Create Connected Account

    ErrorCodes:
      * CONNECTED_ACCOUNT_ALREADY_EXISTS - Connected account already exists

  """
  CreateConnectedAccount(authorizationCode: String!, name: String): StripeConnectedAccount
  CreateCourse(input: CourseInput!): Course
  CreateTeam(input: TeamInput!): Team
  UpdateTeam(teamId: ID!, input: UpdateTeamInput!): Team
  CreateTeamPlayer(input: TeamPlayerInput!): TeamPlayerType
  UpdateTeamPlayer(teamPlayerId: ID!, input: UpdateTeamPlayerInput!): TeamPlayerType
  """

      roles: [TOUR_ADMIN, SUPER_ADMIN]

      ErrorCodes:
        * TOUR_PASS_REQUIRES_REGISTRATION_FEE - Tour-pass requires a registration-fee
        * CURRENCY_IS_NOT_ENABLED_FOR_PAYMENT - Currency is not enabled for payment
    
  """
  CreateDivision(tourId: ID!, input: DivisionInput!, asRole: MutationUserRoleType): Division
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  CreateEvent(tourId: ID!, input: EventInput!, asRole: MutationUserRoleType): Event
  CreateEventTiebreak(playerId: ID!, place: Float!): Tiebreak
  CreateGroup(poolId: ID!, input: GroupInput!): Group
  """

      Create an event registration invitation that once activated by a user allows registration regardless of registration stages and or payment requirements.
    
  """
  CreateRegistrationInvitation(eventId: ID!): EventRegistrationInvitation
  """

      Create a reservation for a spot during group signup. The reservation will expire after 3720000 minutes

      ErrorCodes:
        * REGISTRATION_IS_CLOSED - Registration is closed
        * REGISTRATION_ALREADY_EXISTS - Registration already exists
        * USER_ALREADY_A_PLAYER - User is already a player in this event
        * USER_NOT_VERIFIED - User not verified
        * GROUP_SIGNUP_NOT_ENABLED - Group signup is not enabled
        * NO_AVAILABLE_SPOT_IN_GROUP - No available spot in group
    
  """
  CreateGroupRegistrationReservation(eventId: ID!, groupId: ID!): GroupRegistrationReservation
  """

    Auto-create groups and place all players in a group.

    ErrorCodes:
      * GROUPS_EXISTS - Auto-creation cant be run when groups already exists
      * POOLS_NOT_FOUND - Has to be atleast one pool in round
      * TOO_MANY_PLAYERS - Not enough holes on the course for the current amount of players
      * INVALID_START_METHOD - All pools must have same startMethod
      * INVALID_START_HOLES - For teetime all pools must have a start hole
      * SELECTED_CREATION_METHOD_CANT_BE_USED_ON_FIRST_ROUND - Selected creationMethod cant be used on the first round
      * INVALID_NUMBER_OF_POOLS - RANDOM_WITHIN_POOL must have same number of pools in current round as in previous round

  """
  CreateGroups(
    roundId: ID!
    creationMethod: RoundGroupCreationMethod!
    divisionAssigment: [RoundDivisionAssigmentInput]!
  ): Round
  """

    Create groups for a pool.

    ErrorCodes:
      * GROUPS_EXISTS - Auto-creation cant be run when groups already exists
      * POOLS_MUST_BE_PART_OF_SAME_EVENT - Pools must be part of same event
      * TOO_MANY_PLAYERS - Not enough holes on the course for the current amount of players
      * INVALID_START_HOLES - For teetime all pools must have a start hole
      * POOL_NOT_COMPLETED - Pool is not completed

  """
  CreateGroupsForPool(
    poolId: ID!
    creationMethod: PoolGroupCreationMethod!
    divisionAssigment: [DivisionAssigmentInput]!
    previousPoolId: ID
  ): Pool
  CreateLayout(courseId: ID, input: LayoutInput!): Layout
  """

      Creates a new version of the layout with a +1 in version number
    
  """
  CreateLayoutVersion(layoutId: ID!, input: CreateLayoutVersionInput!): LayoutVersion
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  CreatePool(roundId: ID!, input: PoolInput!, asRole: MutationUserRoleType): Pool
  """

      Create result

      ErrorCodes:
        * GROUP_HAS_UNVERIFIED_RESULTS - Verify-mode and unverified results
        * RESULT_IS_SIGNED - Sign-result is enabled and player has already signed the results
        * GROUP_HAS_MARSHALL - Group has an assigned marshall and only that user can create scores
        * RESULT_FOR_HOLE_EXISTS - The hole already has a result
        * PLAYER_NOT_PART_OF_GROUP - Player is not part of the group
        * POOL_NOT_OPEN - Pool is not open
        * GROUP_NOT_OPEN - Group is not open
    
  """
  CreateResult(groupId: ID!, holeId: ID!, playerId: ID!, input: ResultInput!, asRole: MutationUserRoleType): Result
  """

      Create team result

      ErrorCodes:
        * GROUP_HAS_UNVERIFIED_RESULTS - Verify-mode and unverified results
        * RESULT_IS_SIGNED - Sign-result is enabled and player has already signed the results
        * GROUP_HAS_MARSHALL - Group has an assigned marshall and only that user can create scores
        * RESULT_FOR_HOLE_EXISTS - The hole already has a result
        * PLAYER_NOT_PART_OF_GROUP - Player is not part of the group
        * POOL_NOT_OPEN - Pool is not open
        * GROUP_NOT_OPEN - Group is not open
    
  """
  CreateTeamResult(
    groupId: ID!
    holeId: ID!
    teamPlayerId: ID!
    input: TeamResultInput!
    asRole: MutationUserRoleType
  ): TeamResult
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  CreateRound(eventId: ID!, asRole: MutationUserRoleType): Round
  """

      Create a scorecard for casual play
    
  """
  CreateScorecard(input: CreateScorecardInput!): Scorecard
  """

      Create a result for a casual play scorecard

      ErrorCodes:
        * RESULT_FOR_HOLE_EXISTS - The hole already has a result
    
  """
  CreateScorecardResult(scorecardId: ID!, playerId: ID!, holeId: ID!, input: CreateScorecardResultInput!): ScorecardResult
  CreateTour(input: TourInput!): Tour
  """

      ErrorCodes:
        * TOUR_PASS_REQUIRES_REGISTRATION_FEE - Tour-pass requires a registration-fee
        * CURRENCY_IS_NOT_ENABLED_FOR_PAYMENT - Currency is not enabled for payment
    
  """
  CreateTourExtended(input: ExtendedTourInput!): Tour
  """
  Create a tax-rate for connected account
  """
  CreateTaxRate(stripeAccountId: ID!, input: CreateTaxRateInput!): TaxRate
  CreateCheckoutSession(eventId: ID!, successUrl: String!, cancelUrl: String!, input: CheckoutSessionInput!): CheckoutSession
  DeleteAdministrator(tourId: ID!, userId: ID!): Administrator
  DeleteConnectedAccount(id: ID!): StripeConnectedAccount
  """

      Deletes a division. Can be used if no registration or player are connected to the division.

      ErrorCodes:
        * DIVISION_CANT_BE_DELETED - Division cant be deleted
    
  """
  DeleteDivision(divisionId: ID!): Boolean
  """

      Deletes an Event. Can be used if no registration or player are connected to the Event.

      ErrorCodes:
        * EVENT_CANT_BE_DELETED - Event cant be deleted
    
  """
  DeleteEvent(eventId: ID!): Boolean
  """
  Remove specified document from the event
  """
  DeleteEventDocument(documentId: ID!, url: ID!): Boolean
  DeleteEventTiebreak(tiebreakId: ID!): Tiebreak
  """

    ErrorCodes:
      * GROUP_NOT_CLOSED - Cant delete open or done group
      * GROUP_NOT_EMPTY - Cant delete Group with players in it

  """
  DeleteGroup(groupId: ID!): Group
  """

    Delete all groups for a pool

    ErrorCodes:
      * RESULTS_EXISTS - Groups cant be deleted, results are created for pool

  """
  DeleteGroups(poolId: ID!): Pool
  """

    Delete Layout and all versions
    ErrorCodes:
      * LAYOUT_IS_IN_USE - Layout is in use

  """
  DeleteLayout(layoutId: ID!): Boolean
  """

      Deletes layout-version.

      ErrorCodes:
        * CANT_DELETE_LAYOUT_VERSION_1 - Cant delete layout version with version 1
        * LAYOUT_VERSION_IS_IN_USE - The layout version is in use
    
  """
  DeleteLayoutVersion(layoutVersionId: ID!): Boolean
  """

    ErrorCodes:
      * POOL_CANT_BE_DELETED - Cant delete ongoing pool

  """
  DeletePool(poolId: ID!): Boolean
  """

    Only available to a Tour Admin.
    ErrorCodes:
      * POOL_NOT_OPEN - Pool is not open
      * GROUP_NOT_OPEN - Group is not open

  """
  DeleteResult(resultId: ID!): Boolean
  """

    Only available to a Tour Admin.
    ErrorCodes:
      * POOL_NOT_OPEN - Pool is not open
      * GROUP_NOT_OPEN - Group is not open

  """
  DeleteTeamResult(resultId: ID!): Boolean
  """

    ErrorCodes:
      * ROUND_CANT_BE_DELETED - Cant delete round with ongoing pools

  """
  DeleteRound(roundId: ID!): Boolean
  """

      Delete a scorecard
    
  """
  DeleteScorecard(scorecardId: ID!): Boolean
  """
  Deletes a Shop Item. If there is no sales made, you can delete any shop item

    ErrorCodes:
    * SHOP_ITEM_CANT_BE_DELETED - Shop Item cant be deleted
    
  """
  DeleteShopItem(shopItemId: ID!): Boolean
  """

      Deletes a tour. Can be used if no registration or players exists

      ErrorCodes:
        * TOUR_CANT_BE_DELETED - Tour cant be deleted
    
  """
  DeleteTour(tourId: ID!): Boolean
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  PublishTour(tourId: ID!, asRole: MutationUserRoleType): Tour
  """

      Registers the current logged in user to an event

      ErrorCodes:
        * REGISTRATION_IS_CLOSED - Registration is closed
        * REGISTRATION_ALREADY_EXISTS - Registration already exists
        * USER_ALREADY_A_PLAYER - User is already a player in this event
        * USER_NOT_VERIFIED - User not verified
        * TOUR_PASS_NOT_AVAILABLE - Tour pass is not avaible
        * USER_HAS_TOUR_PASS_FOR_OTHER_DIVISION - User has tour-pass for other division
        * NO_AVAILABLE_SPOT_IN_GROUP - No available spot in group
        * NOT_PASSING_REGISTRATION_STAGE - Not passing registration stage
        * EVENT_IS_STARTED - Event is started
        * STRIPE_TOKEN_ALREADY_USED - token already used
        * STRIPE_CONNECTION_ERROR - Connection error
        * STRIPE_INCORRECT_CVC - Incorrect cvc
        * STRIPE_INCORRECT_CARD_NUMBER - Incorrect card number
        * STRIPE_INSUFFICIENT_FUNDS - Insufficient funds on card
        * STRIPE_CARD_DECLINED - Card declined
        * STRIPE_CARD_ERROR - Generic card error
        * STRIPE_UNKNOWN_ERROR - Stripe returned an unknown error
    
  """
  RegisterToEvent(
    registrationItem: CreateFreeRegistrationInput!
    lineItems: [CreateFreeLineItemsInput]
  ): Registration
  """

      Registers a team to an event

      ErrorCodes:
        * REGISTRATION_IS_CLOSED - Registration is closed
        * REGISTRATION_ALREADY_EXISTS - Registration already exists
        * TEAM_ALREADY_A_PLAYER - Team is already a player in this event
        * TOUR_PASS_NOT_AVAILABLE - Tour pass is not avaible
        * NO_AVAILABLE_SPOT_IN_GROUP - No available spot in group
        * NOT_PASSING_REGISTRATION_STAGE - Not passing registration stage
        * EVENT_IS_STARTED - Event is started
        * STRIPE_TOKEN_ALREADY_USED - token already used
        * STRIPE_CONNECTION_ERROR - Connection error
        * STRIPE_INCORRECT_CVC - Incorrect cvc
        * STRIPE_INCORRECT_CARD_NUMBER - Incorrect card number
        * STRIPE_INSUFFICIENT_FUNDS - Insufficient funds on card
        * STRIPE_CARD_DECLINED - Card declined
        * STRIPE_CARD_ERROR - Generic card error
        * STRIPE_UNKNOWN_ERROR - Stripe returned an unknown error
    
  """
  RegisterTeamToEvent(
    registrationItem: CreateFreeTeamRegistrationInput!
    lineItems: [CreateFreeTeamLineItemsInput]
  ): TeamRegistration
  """

      Removes the marshall from the group. Can only be called by the marshall himself and Admins

      ErrorCodes:
      * GROUP_HAS_NO_MARSHALL - Group does not have an assigned marshall
    
  """
  RemoveGroupMarshall(groupId: ID!): Group
  """

    ErrorCodes:
      * PLAYER_NOT_PART_OF_GROUP - Player is not in group
      * POOL_IS_COMPLETED - Cant remove player from group if pool is completed
      * GROUP_NOT_CLOSED - Cant remove player from group after group is started

  """
  RemovePlayerFromGroup(groupId: ID!, playerId: ID!): Player
  """

    ErrorCodes:
      * PLAYER_NOT_PART_OF_GROUP - Player is not in group
      * POOL_IS_COMPLETED - Cant remove player from group if pool is completed
      * GROUP_NOT_CLOSED - Cant remove player from group after group is started

  """
  RemoveTeamPlayerFromGroup(groupId: ID!, playerId: ID!): TeamPlayerType
  """

    ErrorCodes:
      * PLAYER_NOT_PART_OF_GROUP - Player is not in group
      * ONGOING_POOLS - Cant remove a player after a pool has been started

  """
  RemoveUserFromEvent(eventId: ID!, userId: ID!): Player
  """

      Remove a user from the scorecard. Only members of the scorecard can call this mutation.
      Owner cannot remove themselves.

      ErrorCodes:
        * NOT_FOUND - User is not a player or scorecard was not found
        * NOT_ALLOWED - User is the creator of the scorecard
    
  """
  RemoveUserFromScorecard(playerId: ID!, scorecardId: ID!): Boolean
  """

      Request a password reset link to be sent to the email

      ErrorCodes:
        * EMAIL_NOT_IN_USE - Email not found
    
  """
  RequestPasswordReset(email: String!): Boolean
  """

      Reset a password with a password reset token
    
  """
  ResetPassword(resetToken: String!, newPassword: String!): Boolean
  """

      Sends an email with verification link

      ErrorCodes:
        * USER_IS_VERIFIED - User is already verified
    
  """
  SendVerifyEmail: Boolean
  """

    Shuffle all starting holes for all groups in a pool

    ErrorCodes:
      * RESULTS_EXISTS - Groups cant be shuffled, results are created for pool

  """
  ShuffleStartingHoles(poolId: ID!): Pool
  """

      ErrorCodes:
        * RESULT_IS_ALREADY_SIGNED - Results are already signed
        * PIN_CODE_LOCKED - PinCode is locked
        * WRONG_PIN_CODE_ENTERED - Wrong pin or the user does not have a pincode
        * GROUP_HAS_UNVERIFIED_RESULTS - Verify mode and group has unverified results
        * GROUP_IS_CLOSED - Group has not opened yet
        * GROUP_IS_DONE - Group is done
        * EVENT_RESULT_SIGNING_IS_DISABLED - Results signing is not enabled
        * NO_PIN_CODE - User has no pin code
    
  """
  SignResult(groupId: ID!, playerId: ID!, pinCode: String, asRole: MutationUserRoleType): GroupPlayerConnection
  """

      ErrorCodes:
        * RESULT_IS_ALREADY_SIGNED - Results are already signed
        * PIN_CODE_LOCKED - PinCode is locked
        * WRONG_PIN_CODE_ENTERED - Wrong pin or the user does not have a pincode
        * GROUP_HAS_UNVERIFIED_RESULTS - Verify mode and group has unverified results
        * GROUP_IS_CLOSED - Group has not opened yet
        * GROUP_IS_DONE - Group is done
        * EVENT_RESULT_SIGNING_IS_DISABLED - Results signing is not enabled
        * NO_PIN_CODE - User has no pin code
    
  """
  SignTeamResult(groupId: ID!, playerId: ID!, pinCode: String, asRole: MutationUserRoleType): GroupPlayerConnection
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  UnPublishTour(tourId: ID!, asRole: MutationUserRoleType): Tour
  UpdateAnonymousUser(userId: ID!, input: UpdateAnonymousUserInput!): AnonymousUser
  UpdateCourse(courseId: ID!, input: UpdateCourseInput!): Course
  """

      Update 'disable'-flag on account. Only callable by super-admins.

      ErrorCodes:
        * ACCOUNT_ANONYMIZED - Account is anonymized, cant be updated
    
  """
  UpdateDisableAccount(userId: ID!, disabled: Boolean!): User
  """

      roles: [TOUR_ADMIN, SUPER_ADMIN]

      ErrorCodes:
        * TOUR_PASS_REQUIRES_REGISTRATION_FEE - Tour-pass requires a registration-fee
        * CURRENCY_IS_NOT_ENABLED_FOR_PAYMENT - Currency is not enabled for payment
    
  """
  UpdateDivision(divisionId: ID!, input: UpdateDivisionInput!, asRole: MutationUserRoleType): Division
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  UpdateEvent(eventId: ID!, input: UpdateEventInput!, asRole: MutationUserRoleType): Event
  """

    ErrorCodes:
      * GROUP_NOT_CLOSED - Cant update group when status is OPEN or DONE

  """
  UpdateGroup(groupId: ID!, input: UpdateGroupInput!, asRole: MutationUserRoleType): Group
  """

    Used by Admin to update the status of the group

    ErrorCodes:
      * POOL_NOT_OPEN - Pool is not open

  """
  UpdateGroupStatus(groupId: ID!, status: GroupStatus!): Group
  UpdateLayout(layoutId: ID!, input: UpdateLayoutInput!): Layout
  """

      Update an existing layout-version.
      * If 'layoutVersion.isInUse' is true then its not possible to add or remove holes but still possible to update pars
      * If 'layoutVersion.hasResults' is true then there are results created, any modifcation of pars

      ErrorCodes:
        * LAYOUT_VERSION_IS_IN_USE - Cant add or remove holes when layout version is in use
        * LAYOUT_VERSION_HAS_RESULTS - Layout-version has results, pass 'confirmUpdateResults':true to update anyway
    
  """
  UpdateLayoutVersion(
    layoutVersionId: ID!
    input: UpdateLayoutVersionInput!
    confirmUpdateResults: Boolean
  ): LayoutVersion
  """
  Updates the currently logged in user
  """
  UpdateMeUser(input: UpdateMeUserInput!): User
  UpdatePlayer(playerId: ID!, input: UpdatePlayerInput!, asRole: MutationUserRoleType): Player
  """
  `asRole` defaults to USER
  """
  UpdatePlayerDnf(playerId: ID!, isDnf: Boolean!, asRole: MutationUserRoleType): Player
  UpdatePlayerDns(playerId: ID!, isDns: Boolean!, asRole: MutationUserRoleType): Player
  """

    roles: [TOUR_ADMIN, SUPER_ADMIN]

    ErrorCodes:
      * INVALID_POOL_STATUS - Cant update pool when status is OPEN or COMPLETED
      * GROUPS_EXISTS - Cant update layout when groups exists

  """
  UpdatePool(poolId: ID!, input: UpdatePoolInput!, asRole: MutationUserRoleType): Pool
  """
  Update the status of the Pool.
    If the status is set to OPEN and the pool startMethod is SHOTGUN then all the groups will be set to OPEN also
      ErrorCodes:
      * PLAYERS_MISSING_SCORE - Player(s) are missing score
    
  """
  UpdatePoolStatus(poolId: ID!, status: PoolStatus!, confirmDnf: Boolean): Pool
  """

      Allow a TD to update the status of a registration invitation between PENDING and CANCELLED
      Once status is USED it can no longer be updated.
    
  """
  UpdateRegistrationInvitation(invitationId: ID!, status: EventRegistrationInvitationStatus!): EventRegistrationInvitation
  """

      Update a registration.
      roles: [USER, TOUR_ADMIN, SUPER_ADMIN]
      ErrorCodes:
        * EVENT_IS_STARTED - Cant update registration after a pool has been started in the event
        * NO_AVAILABLE_SPOT_IN_GROUP - No available spot in group
    
  """
  UpdateRegistration(
    registrationId: ID!
    input: UpdateRegistrationInput!
    asRole: MutationUserRoleType
  ): Registration
  """

      roles: [TOUR_ADMIN, SUPER_ADMIN]

      ErrorCodes:
        * INVALID_POOL_STATUS - Event has open or completed pool
        * EVENT_MAX_SPOTS_REACHED - No free spot in the event
      
  """
  UpdateRegistrationStatus(registrationId: ID!, status: RegistrationStatus!, asRole: MutationUserRoleType): Registration
  """

      roles: [TOUR_ADMIN, SUPER_ADMIN]

      ErrorCodes:
        * INVALID_POOL_STATUS - Event has open or completed pool
        * EVENT_MAX_SPOTS_REACHED - No free spot in the event
      
  """
  UpdateTeamRegistrationStatus(
    registrationId: ID!
    status: RegistrationStatus!
    asRole: MutationUserRoleType
  ): TeamRegistration
  """

      Update a team registration.
      roles: [USER, TOUR_ADMIN, SUPER_ADMIN]
      ErrorCodes:
        * EVENT_IS_STARTED - Cant update registration after a pool has been started in the event
    
  """
  UpdateTeamRegistration(
    registrationId: ID!
    input: UpdateTeamRegistrationInput!
    asRole: MutationUserRoleType
  ): TeamRegistration
  """

      Update result

      ErrorCodes:
        * RESULT_IS_SIGNED - Sign-result is enabled and player has signed the results
        * GROUP_HAS_MARSHALL - When a group has an assigned marshall only that user can update scores
        * POOL_NOT_OPEN - Pool is not open
        * GROUP_NOT_OPEN - Group is not open
    
  """
  UpdateResult(resultId: ID!, input: UpdateResultInput!, asRole: MutationUserRoleType): Result
  """

      Update team result

      ErrorCodes:
        * RESULT_IS_SIGNED - Sign-result is enabled and player has signed the results
        * GROUP_HAS_MARSHALL - When a group has an assigned marshall only that user can update scores
        * POOL_NOT_OPEN - Pool is not open
        * GROUP_NOT_OPEN - Group is not open
    
  """
  UpdateTeamResult(resultId: ID!, input: UpdateTeamResultInput!, asRole: MutationUserRoleType): TeamResult
  """

      Update a scorecard for casual play.

      * If the layoutVersion is updated the startHoleId needs to be updated too.

      ErrorCodes:
        * CANT_CHANGE_LAYOUT_WHEN_RESULT_EXISTS - Cant change layout-version when results exists
    
  """
  UpdateScorecard(scorecardId: ID!, input: UpdateScorecardInput!): Scorecard
  """

      Update a result for a casual play scorecard
    
  """
  UpdateScorecardResult(resultId: ID!, input: UpdateScorecardResultInput!): ScorecardResult
  """
  roles: [TOUR_ADMIN, SUPER_ADMIN]
  """
  UpdateTour(tourId: ID!, input: UpdateTourInput!, asRole: MutationUserRoleType): Tour
  """
  Updates the profile for the specified user. Admins only
  """
  UpdateUser(userId: ID!, input: UpdateUserInput!): UserProfile
  """

      ErrorCodes:
      * TOUR_HAS_MANAGED_PAYMENT - Tour has MANAGED payment
    
  """
  UpdateUserPayment(eventId: ID!, userId: ID!, hasPaid: Boolean!): Boolean
  """

      ErrorCodes:
      * TOUR_HAS_MANAGED_PAYMENT - Tour has MANAGED payment
    
  """
  UpdateTeamPayment(eventId: ID!, teamId: ID!, hasPaid: Boolean!): Boolean
  """

      Verify result

      ErrorCodes:
        * INVALID_RESULT_HASH - Result hash is not matching
        * CANT_VERIFY_YOUR_OWN_RESULT - Cant verify your own result
        * VERIFY_MODE_NOT_ACTIVE - VerifyMode is not activated for this event
        * POOL_NOT_OPEN - Pool is not open
        * GROUP_NOT_OPEN - Group is not open
    
  """
  UpdateVerifyResult(resultId: ID!, isVerified: Boolean!, resultHash: String!, asRole: MutationUserRoleType): Result
  """

      Verify team result

      ErrorCodes:
        * INVALID_RESULT_HASH - Result hash is not matching
        * CANT_VERIFY_YOUR_OWN_RESULT - Cant verify your own result
        * VERIFY_MODE_NOT_ACTIVE - VerifyMode is not activated for this event
        * POOL_NOT_OPEN - Pool is not open
        * GROUP_NOT_OPEN - Group is not open
    
  """
  UpdateVerifyTeamResult(resultId: ID!, isVerified: Boolean!, resultHash: String!, asRole: MutationUserRoleType): Result
  """
  Update a tax-rate for connected account
  """
  UpdateTaxRate(taxId: ID!, input: UpdateTaxRateInput!): TaxRate
  UpdateShopItem(shopItemId: ID!, input: UpdateShopItemInput!): ShopItem
  UpdateOrder(orderId: ID!, input: UpdateOrderInput!): Boolean
  UpdateLineItem(lineItemId: ID!, input: UpdateLineItemInput!): Boolean
  UpdateEventDocument(documentId: ID!, input: EventDocumentUpdateInput!): Boolean
  ValidateAppVersion(appVersion: String!, apiVersion: String!, devicePlatform: DevicePlatformType!): Boolean
  VerifyEmail(token: ID!): Me
  CreateRegistrationStage(eventId: ID!, divisionId: ID!, input: CreateRegistrationStageInput!): RegistrationStage
  CreateRegistrationCriteria(registrationStageId: ID!, input: CreateRegistrationCriteriaInput!): RegistrationCriteria
  DeleteRegistrationStage(registrationStageId: ID!): Boolean
  UpdateRegistrationStage(registrationStageId: ID!, input: UpdateRegistrationStageInput!): RegistrationStage
  UpdateRegistrationCriteria(registrationCriteriaId: ID!, input: UpdateRegistrationCriteriaInput!): RegistrationCriteria
  DeleteRegistrationCriteria(registrationCriteriaId: ID!): Boolean
  CreateCourseFacility(courseId: ID!, input: CourseFacilityInput!): CourseFacility
  """

      Delete a course facility. Can be deleted by global admins and course managers.
    
  """
  DeleteCourseFacility(facilityId: ID!): Boolean
  """

      Adds a course admin to a specific course for a specific user. Admins can only add other admins, to add owner you need to be owner or global admin.
    
  """
  AddCourseAdmin(courseId: ID!, userEmail: String!, role: CourseAdministratorRole!): CourseAdministrator
  """

      Delete a course administrator. Admins can remove other admins and owners can remove owners and admins.
    
  """
  RemoveCourseAdmin(courseId: ID!, userId: ID!): Boolean
  CreateHoleUserNote(holeId: ID!, note: String!): HoleUserNote
  """

      Delete the users note for the hole. Can only be delete by the user themselves.
    
  """
  DeleteHoleUserNote(noteId: ID!): Boolean
  UpdateHole(holeId: ID!, input: UpdateHoleInput!): Hole
  """

      Create a message for the event with visibility based on target audience.
    
  """
  CreateEventMessage(eventId: ID!, input: CreateEventMessageInput!): EventMessage
  """

      Can be updated by any tour admin
    
  """
  UpdateEventMessage(messageId: ID!, input: UpdateEventMessageInput!): EventMessage
  """

      Can be deleted by any tour admin.

  """
  DeleteEventMessage(messageId: ID!): Boolean
  """

      Create a read receipt for the event message.
    
  """
  CreateEventMessageReadReceipt(messageId: ID!): ReadReceipt
  """

      Delete a read receipt for the event message.
    
  """
  DeleteEventMessageReadReceipt(messageId: ID!): Boolean
  """

      Create a reply for an event message, optionally you can nest it 1 level to add a comment to a reply.
    
  """
  CreateEventMessageReply(eventMessageId: ID!, parentMessageId: ID, message: String!): EventMessageReply
  """

      Update a reply. Can only be done by author or tour admin. In current version we only 
      allow the toggeling of deleted flag and not updating the message itself
    
  """
  UpdateEventMessageReply(eventMessageReplyId: ID!, isDeleted: Boolean!): EventMessageReply
  """

      Register user device for push services
    
  """
  RegisterDevice(
    deviceToken: String!
    platform: RegisteredDevicePlatform!
    appVersion: String
  ): RegisteredDevice
  """

      Delete the registered device
    
  """
  DeleteRegisteredDevice(deviceToken: String!): Boolean
  """
  Mark event as a favourite for the user
  """
  CreateEventFavourite(eventId: ID!): FavouriteEvent
  """

      Can only be deleted by the user themselves.

  """
  DeleteFavouriteEvent(favouriteId: ID!): Boolean
  ShopCreateItem(eventId: ID!, input: ShopItemInput!, asRole: MutationUserRoleType): ShopItem
  Refund(
    orderId: ID!
    """
    Refund Amount (in cents). Can't be more than order total amount.
    """
    amount: Int!
  ): Boolean
  UpdateRegistrationLineItem(orderId: ID!, refundStatus: Boolean!): Boolean
  CreateSubscription(
    successUrl: String!
    cancelUrl: String!
    """
    Currency code it will be used to fetch Stripe Price Id and add to subscription item
    """
    currency: String!
    """
    Package type it will be used to fetch Stripe Price Id and add to subscription item
    """
    tier: PackageTierEnum!
    """
    Recurrence type it will be used to fetch Stripe Price Id and add to subscription item
    """
    recurrence: RecurrenceEnum!
  ): Subscription
  """

      Callable by the TOUR_ADMIN to change the division the user has a tour pass for.
    
  """
  UpdateTourPaymentDivision(
    tourPaymentId: ID!
    divisionId: ID!
    tourPaymentVariant: TourPaymentVariant!
    updateExistingRegistrations: Boolean
  ): TourPass
  """

      Callable by the SUPER_ADMIN to reindex the elastic search db. 
    
  """
  ReindexElasticSearch: ReindexElasticSearch
  """

      Callable by the SUPER_ADMIN to reindex the elastic search event specified by Id. 
    
  """
  ReindexElasticSearchEvent(eventId: ID!): ReindexElasticSearch
  UpdateGroupPlayerOrder(groupId: ID!, playerOrder: [ID!]!): Boolean
  """

    ErrorCodes:
      * INVALID_POOL_STATUS - Cant update group order when the pool is started

  """
  UpdateGroupOrder(poolId: ID!, groupsOrder: [ID!]!): Boolean
  CreateCourseLayoutReview(layoutId: ID!, layoutVersionId: ID!, input: CreateCourseLayoutReviewInput!): CourseLayoutReview
  UpdateCourseLayoutReview(reviewId: ID!, input: UpdateCourseLayoutReviewInput!): CourseLayoutReview
  """

      ErrorCodes: Can be deleted by the user or the course manager
    
  """
  DeleteCourseLayoutReview(reviewId: ID!): Boolean
  CreateTransferTourOwnership(email: String!, tourId: String!): TransferTourOwnershipType
  CancelTransferTourOwnership(transferId: ID!): TransferTourOwnershipType
  AcceptRejectTransferTourOwnership(token: String!, status: TourTransferStatus!): TransferTourOwnershipType
  """
  Create a division attributes override for a division on an event.
  """
  CreateDivisionOverride(eventId: ID!, divisionId: ID!, input: CreateEventDivisionOverrideInput!): EventDivisionOverride
  """

    Update the event division override
    
  """
  UpdateDivisionOverride(
    eventRegistrationFeeId: ID!
    input: UpdateEventDivisionOverrideInput!
  ): EventDivisionOverride
  """

      Remove event division override
    
  """
  DeleteDivisionOverride(divisionOverrideId: ID!): Boolean
  """

  """
  CreateFreeOrder(eventId: ID!, lineItems: [CreateFreeOrderInputType]!): FreeOrder
  CreateOrganization(input: OrganizationInput!): Organization
  UpdateOrganization(organizationId: String!, input: UpdateOrganizationInput!): Organization
  DeleteOrganization(organizationId: String!): Boolean
  """
  roles: [ADMIN, OWNER]
  """
  AddOrganizationAdministrator(
    organizationId: ID!
    userId: ID!
    asRole: OrganizationAdministrationRole
  ): OrganizationAdministrator
  """

      Delete an organization administrator. Admins can remove other admins and owners can remove owners and admins.
    
  """
  RemoveOrganizationAdministrator(organizationId: ID!, userId: ID!): Boolean
  CreateOrganizationMemberType(input: OrganizationMemberTypeInput!): OrganizationMemberType
  UpdateOrganizationMemberType(input: UpdateOrganizationMemberTypeInput!): OrganizationMemberType
  CreateOrganizationMember(membershipTypeId: ID!): OrganizationMember
  UpdateOrganizationMember(
    membershipId: ID!
    asRole: UpdateOrganizationMemberRoleType!
    input: UpdateOrganizationMemberInput!
  ): OrganizationMember
  DeleteOrganizationMember(membershipId: String!, asRole: DeleteOrganizationMemberRole!): Boolean
  CreateOrganizationCourseRelation(
    organizationId: ID!
    courseId: ID!
    relationType: OrganizationCourseRelationType!
  ): OrganizationCourseRelation
  DeleteOrganizationCourseRelation(courseRelationId: ID!): Boolean
  CreateOrganizationContent(organizationId: ID!, input: OrganizationContentInput!): OrganizationContent
  UpdateOrganizationContent(contentId: ID!, input: UpdateOrganizationContentInput!): Organization
  DeleteOrganizationContent(contentId: ID!): Boolean
  """
  Remove specified document from the organizations content
  """
  DeleteOrganizationContentDocument(documentId: ID!, url: ID!): Boolean
  CreateMembershipCheckoutSession(
    successUrl: String!
    cancelUrl: String!
    membershipItem: CreateMembershipInput!
  ): CheckoutSession
  """
  Create question for users to awnser 
  """
  CreateRegistrationQuestion(eventId: ID!, input: RegistrationQuestionInputType!): RegistrationQuestion
  """
  Update question for users to awnser, certain criters apply when you can update a question and how.
  """
  UpdateRegistrationQuestion(questionId: ID!, input: UpdateRegistrationQuestionInputType!): RegistrationQuestion
  """
  Update question for users to awnser 
  """
  DeleteRegistrationQuestion(questionId: ID!): Boolean
  """
  Create response to a registration question
  """
  CreateRegistrationQuestionResponse(questionId: ID!, value: String, options: [String]): RegistrationQuestion
  """

      Send an email to the guardian of specified course with custom message from user.

      ErrorCodes:
        * NOT_FOUND - Invalid courseId
        * NO_COURSE_GUARDIAN - Course has no guardian.
        * INVALID_LENGTH - Message has an invalid length.
    
  """
  ContactCourseGuardian(courseId: ID!, message: String!): Boolean
  AddTourOrganizer(tourId: ID!, organizationId: ID!): Boolean
  RemoveTourOrganizer(organizationId: ID!, tourId: ID!): Boolean
  CreateOrganizationOfficial(
    organizationId: ID!
    email: String!
    input: CreateOrganizationRoleInput!
  ): OrganizationOfficialType
  UpdateOrganizationOfficial(officialId: ID!, email: String, input: UpdateOrganizationRoleInput!): OrganizationOfficialType
  DeleteOrganizationOfficial(officialId: ID!): Boolean
  """
  Used by admin of either organization or association to set the status of the connection.
  """
  UpdateOrganizationConnectionStatus(organizationId: String!, connectionStatus: OrganizationConnectionStatusType!): Organization
  CreateCustomLeaderboardSystem(tourId: ID!, input: CreateEventPointsMapInput!): EventCustomPointsMap
  UpdateCustomLeaderboardSystem(systemId: ID!, input: UpdateEventPointsMapInput!): EventCustomPointsMap
  DeleteLeaderboardPointsMap(systemId: ID!): Boolean
  """

    ErrorCodes:
      * INVALID_TARGET_GROUP - Swapping within group not allowed, use proper mutation instead.
      * PLAYER_NOT_PART_OF_GROUP - Player is not in group
      * POOL_IS_COMPLETED - Cant remove player from group if pool is completed
      * GROUP_NOT_CLOSED - Cant remove player from group after group is started

  """
  MoveAllPlayersBetweenGroups(sourceGroupId: ID!, targetGroupId: ID!): Boolean
  """

    ErrorCodes:
      * INVALID_TARGET_GROUP - Swapping within group not allowed, use proper mutation instead.
      * PLAYER_NOT_PART_OF_GROUP - Player is not in group
      * POOL_IS_COMPLETED - Cant remove player from group if pool is completed
      * GROUP_NOT_CLOSED - Cant remove player from group after group is started

  """
  SwapPlayersBetweenGroups(sourcePlayerId: ID!, sourceGroupId: ID!, targetPlayerId: ID, targetGroupId: ID!): Boolean
  """

    ErrorCodes:
      * INVALID_TARGET_GROUP - Swapping within group not allowed, use proper mutation instead.
      * PLAYER_NOT_PART_OF_GROUP - Player is not in group
      * POOL_IS_COMPLETED - Cant remove player from group if pool is completed
      * GROUP_NOT_CLOSED - Cant remove player from group after group is started

  """
  SwapTeamsBetweenGroups(sourceTeamPlayerId: ID!, sourceGroupId: ID!, targetTeamPlayerId: ID, targetGroupId: ID!): Boolean
  CreateEventCountryRestriction(eventId: ID!, countryCode: CountryCode!, isBlacklist: Boolean!): EventCountryRestriction
  DeleteEventCountryRestriction(countryRestrictionId: ID!): Boolean
}

"""
In what role the mutation should run as.
  If the role-check fails an NOT_AUTHORIZED error will be returned
"""
enum MutationUserRoleType {
  USER
  TOUR_ADMIN
  SUPER_ADMIN
  GROUP_MARSHALL
}

input CreateAccountInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  firstName: String!
  """

          minLength: 2
          maxLength: 50
        
  """
  lastName: String!
  email: String!
  password: String!
  """

          minValue: 1
          maxValue: 1000000
        
  """
  pdgaNumber: Float
  """

          minLength: 2
          maxLength: 50
        
  """
  club: String
  country: CountryCode
  phone: String
  """
  Has to be 4 numbers. Cant be all same numbers like 1111 and cant be 1234
  """
  pinCode: String
}

"""
Token is used in Authorization header to authenticate
"""
type AuthToken {
  userId: ID!
  token: String!
  expireAt: DateTime!
}

input CourseInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String!
  address: String
  phone: String
  website: String
  type: CourseType
  geolocation: GeolocationInput
  """

          maxLength: 2500
        
  """
  description: String
  access: CourseAccessType
  """

          maxLength: 500
        
  """
  feeInformation: String
}

input TeamInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String!
  type: TeamType
  teamPlayers: [TeamPlayerInputByTeam]!
}

input TeamPlayerInputByTeam {
  fk_user_id: String!
}

input UpdateTeamInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String
  archived: Boolean
  active: Boolean
  type: TeamType
}

input TeamPlayerInput {
  userId: String!
  teamId: String!
  status: TeamPlayerStatusType
}

input UpdateTeamPlayerInput {
  status: TeamPlayerStatusType
}

input DivisionInput {
  type: String!
  taxRateId: ID
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  reservedSpots: Float
  """

          minValue: 999
          maxValue: 1
        
  """
  maxRegistrations: Float
  """

          minValue: 0
          maxValue: 10000
        
  """
  registrationFee: Float
  """

          minValue: 1
          maxValue: 10000
        
  """
  tourPassFee: Float
  """

        Properties to use with custom divisions to apply type and name
        
  """
  customDivision: CustomDivisionInput
  """
  Can only be  applied to PDGA divisions that have age restrictions
  """
  isAgeRestricted: Boolean
  """
  Can only be  applied to Female PDGA divisions
  """
  isGenderLocked: Boolean
}

input CustomDivisionInput {
  """

          minLength: 3
          maxLength: 4
        
  """
  customType: String
  """

          minLength: 3
          maxLength: 20
        
  """
  customName: String
}

input EventInput {
  """

          minLength: 2
          maxLength: 70
        
  """
  name: String!
  """

          maxLength: 1500
        
  """
  description: String
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  maxRegistrations: Float
  """

          minValue: 0
          maxValue: 99
        
  """
  maxWildcards: Float
  registrationOpenAt: DateTime
  registrationCloseAt: DateTime
  """

          maxLength: 50
        
  """
  tournamentDirectorName: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorName: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorPhone: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorEmail: String
  """

          maxLength: 50
        
  """
  phone: String
  email: String
  """

          maxLength: 200
        
  """
  registrationFeesInfo: String
  """

          maxLength: 200
        
  """
  paymentInfo: String
  """

          maxLength: 250
        
  """
  location: String
  """

          maxLength: 200
        
  """
  website: String
  isVerifyMode: Boolean
  """

          minValue: 2
          maxValue: 5
        
  """
  groupSize: Float
  isResultSigningEnabled: Boolean
  multipleScorecardModeEnabled: Boolean
  connectedAccountId: ID
  cityId: ID
  geolocation: GeolocationInput
  checkInStartsAt: DateTime
  checkInEndsAt: DateTime
  autoOpenRegistration: Boolean
  singles: Boolean
  defaultToTeamName: Boolean
  teamSize: Float
  """
  Default is `true`
  """
  autoCloseInactivePools: Boolean
  pdgaEventId: String
  pdgaType: PdgaEventTypeEnum
  """
  Toggle between waitinglist modes
  """
  waitinglistType: WaitingListTypeEnum
  agreementName: String
  agreementUrl: String
}

input GroupInput {
  startHoleId: ID!
  startsAt: DateTime
}

enum RoundGroupCreationMethod {
  """
  Creates groups without adding any players
  """
  GROUPS_ONLY
  """
  Players are added to groups by random
  """
  RANDOM
  """
  Players are added to groups by random within their
        respective division.
  """
  RANDOM_WITHIN_DIVISION
  """
  Players are added to groups ordered by score and by division. This can not be used on round 1
  """
  SCOREANDDIVISION
}

input RoundDivisionAssigmentInput {
  poolId: ID!
  divisionId: ID!
  numberOfPlayers: Float!
}

enum PoolGroupCreationMethod {
  """
  Creates groups without adding any players
  """
  GROUPS_ONLY
  """
  Players are added to groups by random
  """
  RANDOM
  """
  Players are added to groups by random within their respective divisions
  """
  RANDOM_WITHIN_DIVISION
  """
  Players are added to groups ordered by score and by division
  """
  SCOREANDDIVISION
  """
  Players are added to same groups as past round. This can not be used on round 1
  """
  SAME_GROUPS
}

input DivisionAssigmentInput {
  divisionId: ID!
  numberOfPlayers: Float!
}

input LayoutInput {
  """

          minValue: 2
          maxValue: 50
        
  """
  name: String!
  holes: [HoleInput]!
  type: CourseType
  description: String
  dogFriendly: Boolean
  wheelchairAccessible: Boolean
  strollerAccessible: Boolean
  cartAccessible: Boolean
  color: LayoutColorType
  payToPlay: Boolean
}

input HoleInput {
  """

          minValue: 1
          maxValue: 99
        
  """
  number: Float!
  """

          minValue: 1
          maxValue: 99
        
  """
  par: Float!
  """

          minLength: 0
          maxLength: 50
        
  """
  name: String
  """

          minLength: 0
          maxLength: 9999
        
  """
  length: Float
  measureInMeters: Boolean
  """

        Set of coordinates indicating exact position of the Teepad, fairway (1 or many points) and basket in that order.
        
  """
  geolocation: [GeolocationInput]
  """

          maxLength: 1000
        
  """
  note: String
  hasOb: Boolean
  hasHazard: Boolean
  hasMandatory: Boolean
  hasLocalRule: Boolean
}

input CreateLayoutVersionInput {
  holes: [HoleInput]!
}

input PoolInput {
  date: DateTime!
  layoutVersionId: ID!
  """
  Default is SHOTGUN
  """
  startMethod: PoolStartMethod
  """
  Only used for doubles or team play to set what play format is used for the pool.
  """
  playFormat: PoolPlayFormat
  """
  Default is 'false'
  """
  areGroupsPublic: Boolean
}

input ResultInput {
  score: Float!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
}

type TeamResult {
  id: ID!
  score: Float!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
  createdByUserId: ID!
  hash: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdByUser: User!
  updatedByUserId: ID!
  updatedByUser: User!
  isVerified: Boolean!
  verifiedByUserId: ID
  verifiedByUser: User
  teamPlayerConnection: GroupTeamPlayerConnection!
  hole: Hole!
}

input TeamResultInput {
  score: Float!
  isCircleHit: Boolean!
  isOutsidePutt: Boolean!
  isInsidePutt: Boolean!
  isOutOfBounds: Boolean!
}

input CreateScorecardInput {
  date: DateTime!
  layoutVersionId: ID!
  startHoleId: ID!
  playFormat: ScorecardPlayFormat
}

input CreateScorecardResultInput {
  score: Float!
  isCircleHit: Boolean
  isOutsidePutt: Boolean
  isInsidePutt: Boolean
  isOutOfBounds: Boolean
}

input TourInput {
  """

          minLength: 3
          maxLength: 70
        
  """
  name: String!
  """
  Default PAR
  """
  scoringType: ScoringType
  """
  Default LIST
  """
  registrationMethod: RegistrationMethod
  """

          minValue: 2
          maxValue: 52
        
  """
  scoreBasedOnNrOfEvents: Float
  """
  Default MANUAL
  """
  paymentType: TourPaymentType
  connectedAccountId: ID
  """
  Only applicable if paymentType=MANAGED
  """
  automaticRefunds: Boolean
  type: String
  """
  By default messages are not allowed (default value false)
  """
  allowRegistrationMessage: Boolean
  """
  If fee included or not
  """
  feeIncluded: Boolean
  """
  Tour currency
  """
  currency: String
}

input ExtendedTourInput {
  """

          minLength: 3
          maxLength: 70
        
  """
  name: String!
  """
  Default PAR
  """
  scoringType: ScoringType
  """
  Default LIST
  """
  registrationMethod: RegistrationMethod
  """

          minValue: 2
          maxValue: 52
        
  """
  scoreBasedOnNrOfEvents: Float
  """
  Default MANUAL
  """
  paymentType: TourPaymentType
  connectedAccountId: ID
  """
  Only applicable if paymentType=MANAGED
  """
  automaticRefunds: Boolean
  type: String
  events: [ExtendedEventInput!]
  divisions: [DivisionInput!]
  allowRegistrationMessage: Boolean
  """
  If fee included or not
  """
  feeIncluded: Boolean
  """
  Tour currency
  """
  currency: String
}

input ExtendedEventInput {
  """

          minLength: 2
          maxLength: 70
        
  """
  name: String!
  """

          maxLength: 1500
        
  """
  description: String
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  maxRegistrations: Float
  """

          minValue: 0
          maxValue: 99
        
  """
  maxWildcards: Float
  defaultToTeamName: Boolean
  singles: Boolean
  teamSize: Float
  rounds: [RoundInput!]
  registrationOpenAt: DateTime
  registrationCloseAt: DateTime
  """

          maxLength: 50
        
  """
  tournamentDirectorName: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorName: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorPhone: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorEmail: String
  """

          maxLength: 50
        
  """
  phone: String
  email: String
  """

          maxLength: 200
        
  """
  registrationFeesInfo: String
  """

          maxLength: 200
        
  """
  paymentInfo: String
  """

          maxLength: 250
        
  """
  location: String
  """

          maxLength: 200
        
  """
  website: String
  isVerifyMode: Boolean
  isResultSigningEnabled: Boolean
  multipleScorecardModeEnabled: Boolean
  """

          minValue: 2
          maxValue: 5
        
  """
  groupSize: Float
  connectedAccountId: ID
  cityId: ID
  geolocation: GeolocationInput
  checkInStartsAt: DateTime
  checkInEndsAt: DateTime
  autoOpenRegistration: Boolean
  """
  Default is `true`
  """
  autoCloseInactivePools: Boolean
  pdgaEventId: String
  pdgaType: PdgaEventTypeEnum
  """
  Toggle between waitinglist modes
  """
  waitinglistType: WaitingListTypeEnum
  agreementName: String
  agreementUrl: String
}

input RoundInput {
  pools: [PoolInput!]
}

input CreateTaxRateInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String!
  """

        min: 0
        maxLength: 100
      
  """
  percentage: Float!
  """
  Is tax inclusive? Default: false
  """
  inclusive: Boolean = false
  """

          maxLength: 50
        
  """
  description: String
}

"""
Information about checkout session
"""
type CheckoutSession {
  id: String!
  url: String!
  success_url: String!
  cancel_url: String!
  amount_total: Int!
  amount_subtotal: Int!
  amount_tax: Int!
  payment_status: String!
  payment_intent: String!
}

input CheckoutSessionInput {
  registration: CreateRegistrationInput
  lineItems: [CreateLineItemsInput]
  teamId: ID
}

input CreateRegistrationInput {
  divisionId: ID!
  groupId: ID
  message: String
  includeTourPass: Boolean = false
  teamId: ID
  questionResponses: [CreateRegistrationQuestionResponseInput]
}

input CreateRegistrationQuestionResponseInput {
  questionId: ID!
  value: String
  optionIds: [ID]
}

input CreateLineItemsInput {
  shopItemId: ID!
  quantity: Int!
}

input CreateFreeRegistrationInput {
  eventId: ID!
  divisionId: ID!
  groupId: ID
  message: String
  questionResponses: [CreateFreeRegistrationQuestionResponseInput]
}

input CreateFreeRegistrationQuestionResponseInput {
  questionId: ID!
  value: String
  optionIds: [ID]
}

input CreateFreeLineItemsInput {
  shopItemId: ID!
  quantity: Int!
}

input CreateFreeTeamRegistrationInput {
  eventId: ID!
  divisionId: ID!
  teamId: ID!
  groupId: ID
  message: String
  questionResponses: [CreateFreeTeamRegistrationQuestionResponseInput]
}

input CreateFreeTeamRegistrationQuestionResponseInput {
  questionId: ID!
  value: String
  optionIds: [ID]
}

input CreateFreeTeamLineItemsInput {
  shopItemId: ID!
  quantity: Int!
}

input UpdateAnonymousUserInput {
  name: String
}

input UpdateCourseInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String
  address: String
  phone: String
  website: String
  type: CourseType
  geolocation: GeolocationInput
  """

          maxLength: 2500
        
  """
  description: String
  paymentInformation: String
  access: CourseAccessType
  payToPlay: Boolean
  isPublished: Boolean
  publicStats: Boolean
}

input UpdateDivisionInput {
  taxRateId: ID
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  reservedSpots: Float
  """

          minValue: 999
          maxValue: 1
        
  """
  maxRegistrations: Float
  """

          minValue: 0
          maxValue: 10000
        
  """
  registrationFee: Float
  """

          minValue: 1
          maxValue: 10000
        
  """
  tourPassFee: Float
  """
  Can only be  applied to PDGA divisions that have age restrictions
  """
  isAgeRestricted: Boolean
  """
  Can only be  applied to Female PDGA divisions
  """
  isGenderLocked: Boolean
}

input UpdateEventInput {
  """

          minLength: 2
          maxLength: 70
        
  """
  name: String
  """

          maxLength: 1500
        
  """
  description: String
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  maxRegistrations: Float
  isRegistrationOpen: Boolean
  """

          minValue: 0
          maxValue: 99
        
  """
  maxWildcards: Float
  registrationOpenAt: DateTime
  registrationCloseAt: DateTime
  """

          maxLength: 50
        
  """
  tournamentDirectorName: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorName: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorPhone: String
  """

          maxLength: 50
        
  """
  assistantTournamentDirectorEmail: String
  """

          maxLength: 50
        
  """
  phone: String
  email: String
  """

          maxLength: 200
        
  """
  registrationFeesInfo: String
  """

          maxLength: 200
        
  """
  paymentInfo: String
  """

          maxLength: 250
        
  """
  location: String
  """

          maxLength: 200
        
  """
  website: String
  isPublished: Boolean
  isVerifyMode: Boolean
  """

          minValue: 2
          maxValue: 5
        
  """
  groupSize: Float
  isResultSigningEnabled: Boolean
  multipleScorecardModeEnabled: Boolean
  connectedAccountId: ID
  cityId: ID
  geolocation: GeolocationInput
  checkInStartsAt: DateTime
  checkInEndsAt: DateTime
  autoOpenRegistration: Boolean
  """
  Default is `true`
  """
  autoCloseInactivePools: Boolean
  pdgaEventId: String
  pdgaType: PdgaEventTypeEnum
  """
  Toggle between waitinglist modes
  """
  waitinglistType: WaitingListTypeEnum
  agreementName: String
  agreementUrl: String
  """
  Only used for doubles/team events
  """
  defaultToTeamName: Boolean
  """
  Only used for doubles/team events, can only be changed until there is a registration made for the event.
  """
  teamSize: Float
  licenceRequiredFromAssociationId: String
  requireLicenceFromForeignPlayers: Boolean
}

input UpdateGroupInput {
  startHoleId: ID
  startsAt: DateTime
  setAsDesignatedScorer: ID
}

input UpdateLayoutInput {
  """

          minValue: 2
          maxValue: 50
        
  """
  name: String
  type: CourseType
  published: Boolean
  color: LayoutColorType
  description: String
  dogFriendly: Boolean
  wheelchairAccessible: Boolean
  strollerAccessible: Boolean
  cartAccessible: Boolean
  openForPlay: Boolean
  teepads: String
  baskets: String
  difficulty: LayoutDifficultyType
  upkeep: LayoutUpkeepType
  payToPlay: Boolean
}

input UpdateLayoutVersionInput {
  holes: [HoleInput]!
}

input UpdateMeUserInput {
  isPublicProfile: Boolean
  """

          minLength: 2
          maxLength: 50
        
  """
  firstName: String
  """

          minLength: 2
          maxLength: 50
        
  """
  lastName: String
  """

          minLength: 2
          maxLength: 50
        
  """
  club: String
  """

          minLength: 2
          maxLength: 200
        
  """
  instagram: String
  """

          minLength: 2
          maxLength: 200
        
  """
  facebook: String
  """

          minLength: 2
          maxLength: 200
        
  """
  twitter: String
  """

          minLength: 2
          maxLength: 200
        
  """
  youtube: String
  """

          minLength: 2
          maxLength: 200
        
  """
  tiktok: String
  """

          minLength: 2
          maxLength: 200
        
  """
  sponsor: String
  """

          minLength: 2
          maxLength: 1500
        
  """
  biography: String
  """

          minValue: 1
          maxValue: 1000000
        
  """
  pdgaNumber: Float
  country: CountryCode
  phone: String
  """
  Has to be 4 numbers. Cant be all same numbers like 1111, 2222 etc and cant be 1234
  """
  pinCode: String
  birthDate: DateTime
  gender: GenderType
  socialSecurityId: String
}

input UpdatePlayerInput {
  """

        Updatable by [TOUR_ADMIN, SUPER_ADMIN]
  """
  isWildcard: Boolean
  """
  Updatable by [USER, TOUR_ADMIN, SUPER_ADMIN]
  """
  onSite: Boolean
  """

        Updatable by [TOUR_ADMIN, SUPER_ADMIN]
  """
  divisionId: ID
}

input UpdatePoolInput {
  name: String
  date: DateTime
  layoutVersionId: ID
  startMethod: PoolStartMethod
  """
  Only used for doubles or team play to set what play format is used for the pool.
  """
  playFormat: PoolPlayFormat
  areGroupsPublic: Boolean
}

input UpdateRegistrationInput {
  divisionId: ID
  groupId: ID
}

input UpdateTeamRegistrationInput {
  divisionId: ID
}

input UpdateResultInput {
  score: Float
  isCircleHit: Boolean
  isOutsidePutt: Boolean
  isInsidePutt: Boolean
  isOutOfBounds: Boolean
}

input UpdateTeamResultInput {
  score: Float
  isCircleHit: Boolean
  isOutsidePutt: Boolean
  isInsidePutt: Boolean
  isOutOfBounds: Boolean
}

input UpdateScorecardInput {
  date: DateTime
  layoutVersionId: ID
  startHoleId: ID
  status: ScorecardStatus
  playFormat: ScorecardPlayFormat
}

input UpdateScorecardResultInput {
  score: Float
  isCircleHit: Boolean
  isOutsidePutt: Boolean
  isInsidePutt: Boolean
  isOutOfBounds: Boolean
}

input UpdateTourInput {
  """

          minLength: 3
          maxLength: 70
        
  """
  name: String
  scoringType: ScoringType
  registrationMethod: RegistrationMethod
  """

          minValue: 2
          maxValue: 52
        
  """
  scoreBasedOnNrOfEvents: Float
  paymentType: TourPaymentType
  connectedAccountId: ID
  """
  Only applicable if paymentType=MANAGED
  """
  automaticRefunds: Boolean
  isArchived: Boolean
  type: String
  allowRegistrationMessage: Boolean
  """
  If fee included or not
  """
  feeIncluded: Boolean
  """
  Tour currency
  """
  currency: String
  """
  If tour is private or not
  """
  isPrivate: Boolean
  """
  Tax Rate ID
  """
  taxRateId: ID
}

input UpdateUserInput {
  pdgaRating: Float
}

input UpdateTaxRateInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String
  """

          maxLength: 50
        
  """
  description: String
  """
  Is tax rate active?
  """
  active: Boolean
}

input UpdateShopItemInput {
  """
  Title of Shop Item
        minLength: 2
        maxLength: 50
        
  """
  title: String
  """
  Description of Shop Item
        maxLength: 1500
  """
  description: String
  """
  Link of Shop Item
        maxLength: 512
  """
  link: String
  """
  Amount of Shop Item (in cents) | Format: (XXX -> X.XX) | Range: 0 - 999999
  """
  amount: Int
  """
  Stock of Shop Item | Range: -1 - 99999
  """
  stock: Int
  """
  Product image ID
  """
  eventShopImageId: ID
  """
  Tax Rate ID
  """
  taxRateId: ID
  isPublished: Boolean
  """
  Is this shop item available for all events in the tournament.
  """
  isAvailableAllEvents: Boolean
}

input UpdateOrderInput {
  """
  Order Comment
        maxLength: 500
        
  """
  comment: String
}

input UpdateLineItemInput {
  """
  Refund Status: true or false
  """
  refundStatus: Boolean
  """
  Is Delivered?
  """
  isDelivered: Boolean
}

"""
Allows updating the display name of the document and toggle tour availability
"""
input EventDocumentUpdateInput {
  displayName: String
  tourAvailable: Boolean
}

enum DevicePlatformType {
  IOS
  ANDROID
}

input CreateRegistrationStageInput {
  date: DateTime!
  active: Boolean!
  criterias: [CreateRegistrationCriteriaInput]
}

input CreateRegistrationCriteriaInput {
  type: RegistrationCriteriaType!
  value: String
}

input UpdateRegistrationStageInput {
  date: DateTime
  active: Boolean
}

input UpdateRegistrationCriteriaInput {
  type: RegistrationCriteriaType
  value: String
}

input CourseFacilityInput {
  """

          minLength: 2
          maxLength: 50
        
  """
  name: String!
  type: CourseFacilityEnum!
  geolocation: GeolocationInput
}

input UpdateHoleInput {
  note: String
  name: String
}

input CreateEventMessageInput {
  """

          minLength: 1
          maxLength: 255
          
  """
  subject: String!
  """

          minLength: 1
          maxLength: 2500
          
  """
  message: String!
  """

          Audiences:
            * PUBLIC
            * ACCEPTED
            * PENDING
          
  """
  audience: EventMessageAudienceEnum!
  """

          Message types:
            * EVENT_POST
          
  """
  messageType: EventMessageTypeEnumType!
}

input UpdateEventMessageInput {
  """

          minLength: 1
          maxLength: 255
          
  """
  subject: String
  """

          minLength: 1
          maxLength: 2500
          
  """
  message: String
  """

          Audiences: 
            * PUBLIC
            * ACCEPTED
            * PENDING
          
  """
  audience: EventMessageAudienceEnum
}

"""
Users registered device, used primarily for receiving push notifications.
"""
type RegisteredDevice {
  id: ID!
  userId: ID!
  deviceToken: String!
  platform: String!
  deviceEndpoint: String!
  appVersion: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum RegisteredDevicePlatform {
  """
  Device is added into the Android collection
  """
  ANDROID
  """
  Device is added into the iOS collection
  """
  IOS
}

input ShopItemInput {
  """
  Title of Shop Item
        minLength: 2
        maxLength: 50
        
  """
  title: String!
  """
  Description of Shop Item
        maxLength: 1500
  """
  description: String
  """
  Link of Shop Item
        maxLength: 512
  """
  link: String
  """
  Amount of Shop Item (in cents) | Format: (XXX -> X.XX) | Range: 0 - 999999
  """
  amount: Int!
  """
  Stock of Shop Item | Range: -1 - 99999
  """
  stock: Int = 0
  """
  Tax Rate ID
  """
  taxRateId: ID
  """
  Product image ID
  """
  eventShopImageId: ID
  isPublished: Boolean = false
  """
  Is this shop item available for all events in the tournament.
  """
  isAvailableAllEvents: Boolean = false
}

"""
Information about subscription
"""
type Subscription {
  id: String!
  subscriptionId: String
  status: String!
  currentPeriodStart: Int
  currentPeriodEnd: Int
  startDate: Int
  endDate: Int
  cancelDate: Int
  sessionId: String
  expiresAt: Int
  url: String
}

enum RecurrenceEnum {
  MONTHLY
  ANNUALLY
}

enum TourPaymentVariant {
  SINGLES
  TEAMS
}

type ReindexElasticSearch {
  completed: Boolean
  indices: Int
}

input CreateCourseLayoutReviewInput {
  rating: Float!
  review: String!
  teepads: Float!
  baskets: Float!
  upkeep: Float!
  navigation: Float!
}

input UpdateCourseLayoutReviewInput {
  rating: Float
  review: String
  teepads: Float
  baskets: Float
  upkeep: Float
  navigation: Float
}

enum TourTransferStatus {
  ACCEPTED
  ACTIVE
  CANCELED
  REJECTED
}

"""
Leaving a field emtpty will default to the division's value.
"""
input CreateEventDivisionOverrideInput {
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  reservedSpots: Float
  """

          minValue: 999
          maxValue: 1
        
  """
  maxRegistrations: Float
  """

          Can also be set to 0 to make the registration free.
          minValue: 0
          maxValue: 10000
        
  """
  registrationFee: Float
}

"""
Will update the override to matcht the new input, fields left out will be nulled.
"""
input UpdateEventDivisionOverrideInput {
  """

          minValue: 1
          maxValue: 999
        
  """
  maxSpots: Float
  """

          minValue: 1
          maxValue: 999
        
  """
  reservedSpots: Float
  """

          minValue: 999
          maxValue: 1
        
  """
  maxRegistrations: Float
  """

          Can also be set to 0 to make the registration free.
          minValue: 0
          maxValue: 10000
        
  """
  registrationFee: Float
}

input CreateFreeOrderInputType {
  shopItemId: ID!
  quantity: Int!
}

input OrganizationInput {
  type: OrganizationType!
  acceptMembers: AcceptMembers!
  publicMembersList: Boolean!
  name: String!
  contactName: String
  contactMail: String
  contactPhone: String
  contactWebsite: String
  connectedAccountId: String
  currency: String!
  cityId: String!
  geolocation: GeolocationInput
}

input UpdateOrganizationInput {
  acceptMembers: AcceptMembers
  publicMembersList: Boolean
  hidden: Boolean
  name: String
  contactName: String
  contactMail: String
  contactPhone: String
  contactWebsite: String
  connectedAccountId: String
  associationId: String
  currency: String
  cityId: String
  geolocation: GeolocationInput
}

input OrganizationMemberTypeInput {
  organizationId: ID!
  name: String!
  description: String
  fee: Float
  fullMember: Boolean
}

input UpdateOrganizationMemberTypeInput {
  membershipTypeId: ID!
  name: String
  description: String
  fee: Float
  archived: Boolean
  fullMember: Boolean
}

"""
In what role the mutation should run as.
  If the role-check fails an NOT_AUTHORIZED error will be returned
"""
enum UpdateOrganizationMemberRoleType {
  USER
  ORGANIZATION_ADMIN
  ORGANIZATION_OWNER
}

input UpdateOrganizationMemberInput {
  status: OrganizationMemberStatus
  usersMainClub: Boolean
  newMembershipTypeId: String
  extendMembership: Boolean
}

enum OrganizationMemberStatus {
  ACTIVE
  EXPIRED
  PENDING_REVIEW
  PENDING_PAYMENT
}

"""
In what role the mutation should run as.
  If the role-check fails an NOT_AUTHORIZED error will be returned
"""
enum DeleteOrganizationMemberRole {
  USER
  ORGANIZATION_ADMIN
  ORGANIZATION_OWNER
}

input OrganizationContentInput {
  title: String!
  body: String!
  type: OrganizationContentType!
  audience: OrganizationContentAudience!
  published: Boolean!
}

input UpdateOrganizationContentInput {
  title: String
  body: String
  audience: OrganizationContentAudience
  published: Boolean
}

input CreateMembershipInput {
  organizationMemberId: ID!
  organizationMemberTypeId: ID!
}

input RegistrationQuestionInputType {
  question: String!
  questionType: RegistrationQuestionVariant!
  mandatory: Boolean!
  options: [String]
  forDivisionsIds: [String]
}

input UpdateRegistrationQuestionInputType {
  question: String
  mandatory: Boolean
  options: [RegistrationQuestionOptionsInputType]
  forDivisionsIds: [String]
}

input RegistrationQuestionOptionsInputType {
  id: ID!
  value: String!
  position: Float!
}

input CreateOrganizationRoleInput {
  role: String!
  phone: String
  email: String
}

input UpdateOrganizationRoleInput {
  role: String!
  phone: String
  email: String
}

enum OrganizationConnectionStatusType {
  APPROVED
  CANCELLED
  REJECTED
}

input CreateEventPointsMapInput {
  eventId: ID
  positions: [EventCustomPointInput!]!
  tiePoint: TiePoint!
  defaultPoint: Int!
}

input EventCustomPointInput {
  position: Float!
  points: Float!
}

input UpdateEventPointsMapInput {
  positions: [UpdateEventCustomPointInput!]!
  tiePoint: TiePoint!
  defaultPoint: Int!
}

input UpdateEventCustomPointInput {
  position: Float!
  points: Float!
}


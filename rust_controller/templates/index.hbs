<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=2.0">
    <title>Groups and Players by Round</title>
    <script src="https://unpkg.com/htmx.org@1.9.12"></script>
    <script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/ws.js"></script>
    <link rel="stylesheet" href="static/styles.css">
</head>
<body>


<div class="top-selectors">

    <div class="round-selector" hx-ext="ws" ws-connect="/ws/htmx/rounds">
        Leaderboard Round
        <select id="round-dropdown">
            <option value="">Select Round</option>
        </select>
    </div>

    <form id="holeInfo">
        <label for="hole">Enter hole:</label>
        <input type="text" id="hole" name="Hole " required>
        <button type="submit">Update hole info</button>
    </form>

    <div id="division-selector" hx-ext="ws" ws-connect="/ws/division">
        Leaderboard Division
        <select id="division-dropdown">
            <option value="">Select Division</option>
        </select>
    </div>
</div>


<h1>Groups and Players by Round</h1>


<div hx-ext="ws" ws-connect="/ws/htmx/players/selected/watch">
    <div id="selected-players-container">
        <h2>Selected Players</h2>
        <ul id="selected-players-list"></ul>
    </div>
</div>


<div id="groups-container" hx-ext="ws" ws-connect="/ws/htmx/players/selected/set">
    {{#if groups}}
        {{#each groups as |group groupIndex|}}
            <div class="group" id="{{group.id}}">
                <div class="group-header">
                    <h2>
                        Group {{group.group_number}}
                        <span class="status-indicator status-{{group.status}}">{{group.status}}</span>
                    </h2>
                    <button class="select-group" hx-post="/htmx/group/{{group.id}}" hx-trigger="click"
                            hx-target="#selected-players-list">
                        Select Group
                    </button>
                </div>
                <div class="group-content">
                    {{#each group.players as |player|}}
                        <div class="player" data-player-id="{{player.id}}">
                            <span class="player-name">{{player.name}}</span>
                            <form class="queue-form">
                                <input type="number" name="hole" placeholder="Through">
                                <input type="number" name="throws" placeholder="Number of throws">
                                <button type="submit">Queue player</button>
                            </form>
                        </div>
                    {{/each}}
                </div>
            </div>
        {{/each}}
    {{else}}
        <p>No groups available for this round.</p>
    {{/if}}
</div>
<div id="result"></div>

<script>
    document.addEventListener('click', function (e) {
        if (e.target && e.target.classList.contains('group-menu-btn')) {
            const group = e.target.closest('.group');
            const menu = group.querySelector('.popup-menu');
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        } else if (!e.target.closest('.popup-menu')) {
            const menus = document.querySelectorAll('.popup-menu');
            menus.forEach(menu => menu.style.display = 'none');
        }
    });

    document.addEventListener('click', function (e) {
        if (e.target && e.target.closest('.player-actions')) {
            const action = e.target.classList[0];
            const playerItem = e.target.closest('.player-item');
            const playerName = playerItem.querySelector('.player-name').textContent;
            const groupNumber = e.target.closest('.group').querySelector('.group-header h2').textContent.trim().split(' ')[1];
            const playerId = playerItem.dataset.playerId;

            console.log(`Group ${groupNumber} - Player: ${playerName}, Action: ${action}`);

            if (action === 'throw-plus' || action === 'throw-minus') {
                updateThrowCount(playerId, action === 'throw-plus' ? 1 : -1);
            }

            // Here you can add code to handle other actions, e.g., send to server
        }
    });

    function updateThrowCount(playerId, change) {
        const playerElements = document.querySelectorAll(`[data-player-id="${playerId}"]`);
        playerElements.forEach(element => {
            const countElement = element.querySelector('.throw-count .count');
            let count = parseInt(countElement.textContent);
            count += change;
            count = Math.max(0, count); // Ensure count doesn't go below 0
            countElement.textContent = count;
        });
    }


    document.addEventListener('click', function (e) {
        if (e.target && e.target.classList.contains('queue-player')) {
            const playerElement = e.target.closest('.player');
            const form = playerElement.querySelector('.queue-form');
            form.style.display = form.style.display === 'block' ? 'none' : 'block';
        }
    });

    document.addEventListener('submit', function (e) {
        if (e.target && e.target.classList.contains('queue-form')) {
            e.preventDefault();
            const playerElement = e.target.closest('.player');
            const playerId = playerElement.dataset.playerId;
            const formData = new FormData(e.target);

            queuePlayer(playerId, formData);

            e.target.reset();
        }
    });

    function queuePlayer(playerId, formData) {
        fetch(`/player/${playerId}/add-to-queue`, {
            method: 'POST',
            body: formData
        })
                .then(response => response)
                .then(data => {
                    console.log('Player queued successfully:', data);
                    // Update the UI as needed
                })
                .catch((error) => {
                    console.error('Error queuing player:', error);
                });
    }

    document.getElementById('holeInfo').addEventListener('submit', function (e) {
        e.preventDefault();

        const data = document.getElementById('hole').value;

        fetch(`/set-hole/${data}`, {
            method: 'POST',

        }).then(response => response)


    });


</script>
</body>
</html>
